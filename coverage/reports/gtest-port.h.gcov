        -:    0:Source:/usr/include/gtest/internal/gtest-port.h
        -:    0:Graph:../cov-EasyMath.gcno
        -:    0:Data:../cov-EasyMath.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29://
        -:   30:// Low-level types and utilities for porting Google Test to various
        -:   31:// platforms.  All macros ending with _ and symbols defined in an
        -:   32:// internal namespace are subject to change without notice.  Code
        -:   33:// outside Google Test MUST NOT USE THEM DIRECTLY.  Macros that don't
        -:   34:// end with _ are part of Google Test's public API and can be used by
        -:   35:// code outside Google Test.
        -:   36://
        -:   37:// This file is fundamental to Google Test.  All other Google Test source
        -:   38:// files are expected to #include this.  Therefore, it cannot #include
        -:   39:// any other Google Test header.
        -:   40:
        -:   41:// GOOGLETEST_CM0001 DO NOT DELETE
        -:   42:
        -:   43:#ifndef GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
        -:   44:#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
        -:   45:
        -:   46:// Environment-describing macros
        -:   47:// -----------------------------
        -:   48://
        -:   49:// Google Test can be used in many different environments.  Macros in
        -:   50:// this section tell Google Test what kind of environment it is being
        -:   51:// used in, such that Google Test can provide environment-specific
        -:   52:// features and implementations.
        -:   53://
        -:   54:// Google Test tries to automatically detect the properties of its
        -:   55:// environment, so users usually don't need to worry about these
        -:   56:// macros.  However, the automatic detection is not perfect.
        -:   57:// Sometimes it's necessary for a user to define some of the following
        -:   58:// macros in the build script to override Google Test's decisions.
        -:   59://
        -:   60:// If the user doesn't define a macro in the list, Google Test will
        -:   61:// provide a default definition.  After this header is #included, all
        -:   62:// macros in this list will be defined to either 1 or 0.
        -:   63://
        -:   64:// Notes to maintainers:
        -:   65://   - Each macro here is a user-tweakable knob; do not grow the list
        -:   66://     lightly.
        -:   67://   - Use #if to key off these macros.  Don't use #ifdef or "#if
        -:   68://     defined(...)", which will not work as these macros are ALWAYS
        -:   69://     defined.
        -:   70://
        -:   71://   GTEST_HAS_CLONE          - Define it to 1/0 to indicate that clone(2)
        -:   72://                              is/isn't available.
        -:   73://   GTEST_HAS_EXCEPTIONS     - Define it to 1/0 to indicate that exceptions
        -:   74://                              are enabled.
        -:   75://   GTEST_HAS_POSIX_RE       - Define it to 1/0 to indicate that POSIX regular
        -:   76://                              expressions are/aren't available.
        -:   77://   GTEST_HAS_PTHREAD        - Define it to 1/0 to indicate that <pthread.h>
        -:   78://                              is/isn't available.
        -:   79://   GTEST_HAS_RTTI           - Define it to 1/0 to indicate that RTTI is/isn't
        -:   80://                              enabled.
        -:   81://   GTEST_HAS_STD_WSTRING    - Define it to 1/0 to indicate that
        -:   82://                              std::wstring does/doesn't work (Google Test can
        -:   83://                              be used where std::wstring is unavailable).
        -:   84://   GTEST_HAS_SEH            - Define it to 1/0 to indicate whether the
        -:   85://                              compiler supports Microsoft's "Structured
        -:   86://                              Exception Handling".
        -:   87://   GTEST_HAS_STREAM_REDIRECTION
        -:   88://                            - Define it to 1/0 to indicate whether the
        -:   89://                              platform supports I/O stream redirection using
        -:   90://                              dup() and dup2().
        -:   91://   GTEST_LINKED_AS_SHARED_LIBRARY
        -:   92://                            - Define to 1 when compiling tests that use
        -:   93://                              Google Test as a shared library (known as
        -:   94://                              DLL on Windows).
        -:   95://   GTEST_CREATE_SHARED_LIBRARY
        -:   96://                            - Define to 1 when compiling Google Test itself
        -:   97://                              as a shared library.
        -:   98://   GTEST_DEFAULT_DEATH_TEST_STYLE
        -:   99://                            - The default value of --gtest_death_test_style.
        -:  100://                              The legacy default has been "fast" in the open
        -:  101://                              source version since 2008. The recommended value
        -:  102://                              is "threadsafe", and can be set in
        -:  103://                              custom/gtest-port.h.
        -:  104:
        -:  105:// Platform-indicating macros
        -:  106:// --------------------------
        -:  107://
        -:  108:// Macros indicating the platform on which Google Test is being used
        -:  109:// (a macro is defined to 1 if compiled on the given platform;
        -:  110:// otherwise UNDEFINED -- it's never defined to 0.).  Google Test
        -:  111:// defines these macros automatically.  Code outside Google Test MUST
        -:  112:// NOT define them.
        -:  113://
        -:  114://   GTEST_OS_AIX      - IBM AIX
        -:  115://   GTEST_OS_CYGWIN   - Cygwin
        -:  116://   GTEST_OS_DRAGONFLY - DragonFlyBSD
        -:  117://   GTEST_OS_FREEBSD  - FreeBSD
        -:  118://   GTEST_OS_FUCHSIA  - Fuchsia
        -:  119://   GTEST_OS_GNU_HURD - GNU/Hurd
        -:  120://   GTEST_OS_GNU_KFREEBSD - GNU/kFreeBSD
        -:  121://   GTEST_OS_HAIKU    - Haiku
        -:  122://   GTEST_OS_HPUX     - HP-UX
        -:  123://   GTEST_OS_LINUX    - Linux
        -:  124://     GTEST_OS_LINUX_ANDROID - Google Android
        -:  125://   GTEST_OS_MAC      - Mac OS X
        -:  126://     GTEST_OS_IOS    - iOS
        -:  127://   GTEST_OS_NACL     - Google Native Client (NaCl)
        -:  128://   GTEST_OS_NETBSD   - NetBSD
        -:  129://   GTEST_OS_OPENBSD  - OpenBSD
        -:  130://   GTEST_OS_OS2      - OS/2
        -:  131://   GTEST_OS_QNX      - QNX
        -:  132://   GTEST_OS_SOLARIS  - Sun Solaris
        -:  133://   GTEST_OS_WINDOWS  - Windows (Desktop, MinGW, or Mobile)
        -:  134://     GTEST_OS_WINDOWS_DESKTOP  - Windows Desktop
        -:  135://     GTEST_OS_WINDOWS_MINGW    - MinGW
        -:  136://     GTEST_OS_WINDOWS_MOBILE   - Windows Mobile
        -:  137://     GTEST_OS_WINDOWS_PHONE    - Windows Phone
        -:  138://     GTEST_OS_WINDOWS_RT       - Windows Store App/WinRT
        -:  139://   GTEST_OS_ZOS      - z/OS
        -:  140://
        -:  141:// Among the platforms, Cygwin, Linux, Mac OS X, and Windows have the
        -:  142:// most stable support.  Since core members of the Google Test project
        -:  143:// don't have access to other platforms, support for them may be less
        -:  144:// stable.  If you notice any problems on your platform, please notify
        -:  145:// googletestframework@googlegroups.com (patches for fixing them are
        -:  146:// even more welcome!).
        -:  147://
        -:  148:// It is possible that none of the GTEST_OS_* macros are defined.
        -:  149:
        -:  150:// Feature-indicating macros
        -:  151:// -------------------------
        -:  152://
        -:  153:// Macros indicating which Google Test features are available (a macro
        -:  154:// is defined to 1 if the corresponding feature is supported;
        -:  155:// otherwise UNDEFINED -- it's never defined to 0.).  Google Test
        -:  156:// defines these macros automatically.  Code outside Google Test MUST
        -:  157:// NOT define them.
        -:  158://
        -:  159:// These macros are public so that portable tests can be written.
        -:  160:// Such tests typically surround code using a feature with an #if
        -:  161:// which controls that code.  For example:
        -:  162://
        -:  163:// #if GTEST_HAS_DEATH_TEST
        -:  164://   EXPECT_DEATH(DoSomethingDeadly());
        -:  165:// #endif
        -:  166://
        -:  167://   GTEST_HAS_DEATH_TEST   - death tests
        -:  168://   GTEST_HAS_TYPED_TEST   - typed tests
        -:  169://   GTEST_HAS_TYPED_TEST_P - type-parameterized tests
        -:  170://   GTEST_IS_THREADSAFE    - Google Test is thread-safe.
        -:  171://   GOOGLETEST_CM0007 DO NOT DELETE
        -:  172://   GTEST_USES_POSIX_RE    - enhanced POSIX regex is used. Do not confuse with
        -:  173://                            GTEST_HAS_POSIX_RE (see above) which users can
        -:  174://                            define themselves.
        -:  175://   GTEST_USES_SIMPLE_RE   - our own simple regex is used;
        -:  176://                            the above RE\b(s) are mutually exclusive.
        -:  177:
        -:  178:// Misc public macros
        -:  179:// ------------------
        -:  180://
        -:  181://   GTEST_FLAG(flag_name)  - references the variable corresponding to
        -:  182://                            the given Google Test flag.
        -:  183:
        -:  184:// Internal utilities
        -:  185:// ------------------
        -:  186://
        -:  187:// The following macros and utilities are for Google Test's INTERNAL
        -:  188:// use only.  Code outside Google Test MUST NOT USE THEM DIRECTLY.
        -:  189://
        -:  190:// Macros for basic C++ coding:
        -:  191://   GTEST_AMBIGUOUS_ELSE_BLOCKER_ - for disabling a gcc warning.
        -:  192://   GTEST_ATTRIBUTE_UNUSED_  - declares that a class' instances or a
        -:  193://                              variable don't have to be used.
        -:  194://   GTEST_DISALLOW_ASSIGN_   - disables copy operator=.
        -:  195://   GTEST_DISALLOW_COPY_AND_ASSIGN_ - disables copy ctor and operator=.
        -:  196://   GTEST_DISALLOW_MOVE_ASSIGN_   - disables move operator=.
        -:  197://   GTEST_DISALLOW_MOVE_AND_ASSIGN_ - disables move ctor and operator=.
        -:  198://   GTEST_MUST_USE_RESULT_   - declares that a function's result must be used.
        -:  199://   GTEST_INTENTIONAL_CONST_COND_PUSH_ - start code section where MSVC C4127 is
        -:  200://                                        suppressed (constant conditional).
        -:  201://   GTEST_INTENTIONAL_CONST_COND_POP_  - finish code section where MSVC C4127
        -:  202://                                        is suppressed.
        -:  203://   GTEST_INTERNAL_HAS_ANY - for enabling UniversalPrinter<std::any> or
        -:  204://                            UniversalPrinter<absl::any> specializations.
        -:  205://   GTEST_INTERNAL_HAS_OPTIONAL - for enabling UniversalPrinter<std::optional>
        -:  206://   or
        -:  207://                                 UniversalPrinter<absl::optional>
        -:  208://                                 specializations.
        -:  209://   GTEST_INTERNAL_HAS_STRING_VIEW - for enabling Matcher<std::string_view> or
        -:  210://                                    Matcher<absl::string_view>
        -:  211://                                    specializations.
        -:  212://   GTEST_INTERNAL_HAS_VARIANT - for enabling UniversalPrinter<std::variant> or
        -:  213://                                UniversalPrinter<absl::variant>
        -:  214://                                specializations.
        -:  215://
        -:  216:// Synchronization:
        -:  217://   Mutex, MutexLock, ThreadLocal, GetThreadCount()
        -:  218://                            - synchronization primitives.
        -:  219://
        -:  220:// Regular expressions:
        -:  221://   RE             - a simple regular expression class using the POSIX
        -:  222://                    Extended Regular Expression syntax on UNIX-like platforms
        -:  223://                    GOOGLETEST_CM0008 DO NOT DELETE
        -:  224://                    or a reduced regular exception syntax on other
        -:  225://                    platforms, including Windows.
        -:  226:// Logging:
        -:  227://   GTEST_LOG_()   - logs messages at the specified severity level.
        -:  228://   LogToStderr()  - directs all log messages to stderr.
        -:  229://   FlushInfoLog() - flushes informational log messages.
        -:  230://
        -:  231:// Stdout and stderr capturing:
        -:  232://   CaptureStdout()     - starts capturing stdout.
        -:  233://   GetCapturedStdout() - stops capturing stdout and returns the captured
        -:  234://                         string.
        -:  235://   CaptureStderr()     - starts capturing stderr.
        -:  236://   GetCapturedStderr() - stops capturing stderr and returns the captured
        -:  237://                         string.
        -:  238://
        -:  239:// Integer types:
        -:  240://   TypeWithSize   - maps an integer to a int type.
        -:  241://   TimeInMillis   - integers of known sizes.
        -:  242://   BiggestInt     - the biggest signed integer type.
        -:  243://
        -:  244:// Command-line utilities:
        -:  245://   GTEST_DECLARE_*()  - declares a flag.
        -:  246://   GTEST_DEFINE_*()   - defines a flag.
        -:  247://   GetInjectableArgvs() - returns the command line as a vector of strings.
        -:  248://
        -:  249:// Environment variable utilities:
        -:  250://   GetEnv()             - gets the value of an environment variable.
        -:  251://   BoolFromGTestEnv()   - parses a bool environment variable.
        -:  252://   Int32FromGTestEnv()  - parses an int32_t environment variable.
        -:  253://   StringFromGTestEnv() - parses a string environment variable.
        -:  254://
        -:  255:// Deprecation warnings:
        -:  256://   GTEST_INTERNAL_DEPRECATED(message) - attribute marking a function as
        -:  257://                                        deprecated; calling a marked function
        -:  258://                                        should generate a compiler warning
        -:  259:
        -:  260:#include <ctype.h>   // for isspace, etc
        -:  261:#include <stddef.h>  // for ptrdiff_t
        -:  262:#include <stdio.h>
        -:  263:#include <stdlib.h>
        -:  264:#include <string.h>
        -:  265:
        -:  266:#include <cerrno>
        -:  267:#include <cstdint>
        -:  268:#include <limits>
        -:  269:#include <type_traits>
        -:  270:
        -:  271:#ifndef _WIN32_WCE
        -:  272:# include <sys/types.h>
        -:  273:# include <sys/stat.h>
        -:  274:#endif  // !_WIN32_WCE
        -:  275:
        -:  276:#if defined __APPLE__
        -:  277:# include <AvailabilityMacros.h>
        -:  278:# include <TargetConditionals.h>
        -:  279:#endif
        -:  280:
        -:  281:#include <iostream>  // NOLINT
        -:  282:#include <locale>
        -:  283:#include <memory>
        -:  284:#include <string>  // NOLINT
        -:  285:#include <tuple>
        -:  286:#include <vector>  // NOLINT
        -:  287:
        -:  288:#include "gtest/internal/custom/gtest-port.h"
        -:  289:#include "gtest/internal/gtest-port-arch.h"
        -:  290:
        -:  291:#if !defined(GTEST_DEV_EMAIL_)
        -:  292:# define GTEST_DEV_EMAIL_ "googletestframework@@googlegroups.com"
        -:  293:# define GTEST_FLAG_PREFIX_ "gtest_"
        -:  294:# define GTEST_FLAG_PREFIX_DASH_ "gtest-"
        -:  295:# define GTEST_FLAG_PREFIX_UPPER_ "GTEST_"
        -:  296:# define GTEST_NAME_ "Google Test"
        -:  297:# define GTEST_PROJECT_URL_ "https://github.com/google/googletest/"
        -:  298:#endif  // !defined(GTEST_DEV_EMAIL_)
        -:  299:
        -:  300:#if !defined(GTEST_INIT_GOOGLE_TEST_NAME_)
        -:  301:# define GTEST_INIT_GOOGLE_TEST_NAME_ "testing::InitGoogleTest"
        -:  302:#endif  // !defined(GTEST_INIT_GOOGLE_TEST_NAME_)
        -:  303:
        -:  304:// Determines the version of gcc that is used to compile this.
        -:  305:#ifdef __GNUC__
        -:  306:// 40302 means version 4.3.2.
        -:  307:# define GTEST_GCC_VER_ \
        -:  308:    (__GNUC__*10000 + __GNUC_MINOR__*100 + __GNUC_PATCHLEVEL__)
        -:  309:#endif  // __GNUC__
        -:  310:
        -:  311:// Macros for disabling Microsoft Visual C++ warnings.
        -:  312://
        -:  313://   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800 4385)
        -:  314://   /* code that triggers warnings C4800 and C4385 */
        -:  315://   GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  316:#if defined(_MSC_VER)
        -:  317:# define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings) \
        -:  318:    __pragma(warning(push))                        \
        -:  319:    __pragma(warning(disable: warnings))
        -:  320:# define GTEST_DISABLE_MSC_WARNINGS_POP_()          \
        -:  321:    __pragma(warning(pop))
        -:  322:#else
        -:  323:// Not all compilers are MSVC
        -:  324:# define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings)
        -:  325:# define GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  326:#endif
        -:  327:
        -:  328:// Clang on Windows does not understand MSVC's pragma warning.
        -:  329:// We need clang-specific way to disable function deprecation warning.
        -:  330:#ifdef __clang__
        -:  331:# define GTEST_DISABLE_MSC_DEPRECATED_PUSH_()                         \
        -:  332:    _Pragma("clang diagnostic push")                                  \
        -:  333:    _Pragma("clang diagnostic ignored \"-Wdeprecated-declarations\"") \
        -:  334:    _Pragma("clang diagnostic ignored \"-Wdeprecated-implementations\"")
        -:  335:#define GTEST_DISABLE_MSC_DEPRECATED_POP_() \
        -:  336:    _Pragma("clang diagnostic pop")
        -:  337:#else
        -:  338:# define GTEST_DISABLE_MSC_DEPRECATED_PUSH_() \
        -:  339:    GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996)
        -:  340:# define GTEST_DISABLE_MSC_DEPRECATED_POP_() \
        -:  341:    GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  342:#endif
        -:  343:
        -:  344:// Brings in definitions for functions used in the testing::internal::posix
        -:  345:// namespace (read, write, close, chdir, isatty, stat). We do not currently
        -:  346:// use them on Windows Mobile.
        -:  347:#if GTEST_OS_WINDOWS
        -:  348:# if !GTEST_OS_WINDOWS_MOBILE
        -:  349:#  include <direct.h>
        -:  350:#  include <io.h>
        -:  351:# endif
        -:  352:// In order to avoid having to include <windows.h>, use forward declaration
        -:  353:#if GTEST_OS_WINDOWS_MINGW && !defined(__MINGW64_VERSION_MAJOR)
        -:  354:// MinGW defined _CRITICAL_SECTION and _RTL_CRITICAL_SECTION as two
        -:  355:// separate (equivalent) structs, instead of using typedef
        -:  356:typedef struct _CRITICAL_SECTION GTEST_CRITICAL_SECTION;
        -:  357:#else
        -:  358:// Assume CRITICAL_SECTION is a typedef of _RTL_CRITICAL_SECTION.
        -:  359:// This assumption is verified by
        -:  360:// WindowsTypesTest.CRITICAL_SECTIONIs_RTL_CRITICAL_SECTION.
        -:  361:typedef struct _RTL_CRITICAL_SECTION GTEST_CRITICAL_SECTION;
        -:  362:#endif
        -:  363:#else
        -:  364:// This assumes that non-Windows OSes provide unistd.h. For OSes where this
        -:  365:// is not the case, we need to include headers that provide the functions
        -:  366:// mentioned above.
        -:  367:# include <unistd.h>
        -:  368:# include <strings.h>
        -:  369:#endif  // GTEST_OS_WINDOWS
        -:  370:
        -:  371:#if GTEST_OS_LINUX_ANDROID
        -:  372:// Used to define __ANDROID_API__ matching the target NDK API level.
        -:  373:#  include <android/api-level.h>  // NOLINT
        -:  374:#endif
        -:  375:
        -:  376:// Defines this to true if and only if Google Test can use POSIX regular
        -:  377:// expressions.
        -:  378:#ifndef GTEST_HAS_POSIX_RE
        -:  379:# if GTEST_OS_LINUX_ANDROID
        -:  380:// On Android, <regex.h> is only available starting with Gingerbread.
        -:  381:#  define GTEST_HAS_POSIX_RE (__ANDROID_API__ >= 9)
        -:  382:# else
        -:  383:#  define GTEST_HAS_POSIX_RE (!GTEST_OS_WINDOWS)
        -:  384:# endif
        -:  385:#endif
        -:  386:
        -:  387:#if GTEST_USES_PCRE
        -:  388:// The appropriate headers have already been included.
        -:  389:
        -:  390:#elif GTEST_HAS_POSIX_RE
        -:  391:
        -:  392:// On some platforms, <regex.h> needs someone to define size_t, and
        -:  393:// won't compile otherwise.  We can #include it here as we already
        -:  394:// included <stdlib.h>, which is guaranteed to define size_t through
        -:  395:// <stddef.h>.
        -:  396:# include <regex.h>  // NOLINT
        -:  397:
        -:  398:# define GTEST_USES_POSIX_RE 1
        -:  399:
        -:  400:#elif GTEST_OS_WINDOWS
        -:  401:
        -:  402:// <regex.h> is not available on Windows.  Use our own simple regex
        -:  403:// implementation instead.
        -:  404:# define GTEST_USES_SIMPLE_RE 1
        -:  405:
        -:  406:#else
        -:  407:
        -:  408:// <regex.h> may not be available on this platform.  Use our own
        -:  409:// simple regex implementation instead.
        -:  410:# define GTEST_USES_SIMPLE_RE 1
        -:  411:
        -:  412:#endif  // GTEST_USES_PCRE
        -:  413:
        -:  414:#ifndef GTEST_HAS_EXCEPTIONS
        -:  415:// The user didn't tell us whether exceptions are enabled, so we need
        -:  416:// to figure it out.
        -:  417:# if defined(_MSC_VER) && defined(_CPPUNWIND)
        -:  418:// MSVC defines _CPPUNWIND to 1 if and only if exceptions are enabled.
        -:  419:#  define GTEST_HAS_EXCEPTIONS 1
        -:  420:# elif defined(__BORLANDC__)
        -:  421:// C++Builder's implementation of the STL uses the _HAS_EXCEPTIONS
        -:  422:// macro to enable exceptions, so we'll do the same.
        -:  423:// Assumes that exceptions are enabled by default.
        -:  424:#  ifndef _HAS_EXCEPTIONS
        -:  425:#   define _HAS_EXCEPTIONS 1
        -:  426:#  endif  // _HAS_EXCEPTIONS
        -:  427:#  define GTEST_HAS_EXCEPTIONS _HAS_EXCEPTIONS
        -:  428:# elif defined(__clang__)
        -:  429:// clang defines __EXCEPTIONS if and only if exceptions are enabled before clang
        -:  430:// 220714, but if and only if cleanups are enabled after that. In Obj-C++ files,
        -:  431:// there can be cleanups for ObjC exceptions which also need cleanups, even if
        -:  432:// C++ exceptions are disabled. clang has __has_feature(cxx_exceptions) which
        -:  433:// checks for C++ exceptions starting at clang r206352, but which checked for
        -:  434:// cleanups prior to that. To reliably check for C++ exception availability with
        -:  435:// clang, check for
        -:  436:// __EXCEPTIONS && __has_feature(cxx_exceptions).
        -:  437:#  define GTEST_HAS_EXCEPTIONS (__EXCEPTIONS && __has_feature(cxx_exceptions))
        -:  438:# elif defined(__GNUC__) && __EXCEPTIONS
        -:  439:// gcc defines __EXCEPTIONS to 1 if and only if exceptions are enabled.
        -:  440:#  define GTEST_HAS_EXCEPTIONS 1
        -:  441:# elif defined(__SUNPRO_CC)
        -:  442:// Sun Pro CC supports exceptions.  However, there is no compile-time way of
        -:  443:// detecting whether they are enabled or not.  Therefore, we assume that
        -:  444:// they are enabled unless the user tells us otherwise.
        -:  445:#  define GTEST_HAS_EXCEPTIONS 1
        -:  446:# elif defined(__IBMCPP__) && __EXCEPTIONS
        -:  447:// xlC defines __EXCEPTIONS to 1 if and only if exceptions are enabled.
        -:  448:#  define GTEST_HAS_EXCEPTIONS 1
        -:  449:# elif defined(__HP_aCC)
        -:  450:// Exception handling is in effect by default in HP aCC compiler. It has to
        -:  451:// be turned of by +noeh compiler option if desired.
        -:  452:#  define GTEST_HAS_EXCEPTIONS 1
        -:  453:# else
        -:  454:// For other compilers, we assume exceptions are disabled to be
        -:  455:// conservative.
        -:  456:#  define GTEST_HAS_EXCEPTIONS 0
        -:  457:# endif  // defined(_MSC_VER) || defined(__BORLANDC__)
        -:  458:#endif  // GTEST_HAS_EXCEPTIONS
        -:  459:
        -:  460:#ifndef GTEST_HAS_STD_WSTRING
        -:  461:// The user didn't tell us whether ::std::wstring is available, so we need
        -:  462:// to figure it out.
        -:  463:// Cygwin 1.7 and below doesn't support ::std::wstring.
        -:  464:// Solaris' libc++ doesn't support it either.  Android has
        -:  465:// no support for it at least as recent as Froyo (2.2).
        -:  466:#define GTEST_HAS_STD_WSTRING                                         \
        -:  467:  (!(GTEST_OS_LINUX_ANDROID || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS || \
        -:  468:     GTEST_OS_HAIKU || GTEST_OS_ESP32 || GTEST_OS_ESP8266))
        -:  469:
        -:  470:#endif  // GTEST_HAS_STD_WSTRING
        -:  471:
        -:  472:// Determines whether RTTI is available.
        -:  473:#ifndef GTEST_HAS_RTTI
        -:  474:// The user didn't tell us whether RTTI is enabled, so we need to
        -:  475:// figure it out.
        -:  476:
        -:  477:# ifdef _MSC_VER
        -:  478:
        -:  479:#ifdef _CPPRTTI  // MSVC defines this macro if and only if RTTI is enabled.
        -:  480:#   define GTEST_HAS_RTTI 1
        -:  481:#  else
        -:  482:#   define GTEST_HAS_RTTI 0
        -:  483:#  endif
        -:  484:
        -:  485:// Starting with version 4.3.2, gcc defines __GXX_RTTI if and only if RTTI is
        -:  486:// enabled.
        -:  487:# elif defined(__GNUC__)
        -:  488:
        -:  489:#  ifdef __GXX_RTTI
        -:  490:// When building against STLport with the Android NDK and with
        -:  491:// -frtti -fno-exceptions, the build fails at link time with undefined
        -:  492:// references to __cxa_bad_typeid. Note sure if STL or toolchain bug,
        -:  493:// so disable RTTI when detected.
        -:  494:#   if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR) && \
        -:  495:       !defined(__EXCEPTIONS)
        -:  496:#    define GTEST_HAS_RTTI 0
        -:  497:#   else
        -:  498:#    define GTEST_HAS_RTTI 1
        -:  499:#   endif  // GTEST_OS_LINUX_ANDROID && __STLPORT_MAJOR && !__EXCEPTIONS
        -:  500:#  else
        -:  501:#   define GTEST_HAS_RTTI 0
        -:  502:#  endif  // __GXX_RTTI
        -:  503:
        -:  504:// Clang defines __GXX_RTTI starting with version 3.0, but its manual recommends
        -:  505:// using has_feature instead. has_feature(cxx_rtti) is supported since 2.7, the
        -:  506:// first version with C++ support.
        -:  507:# elif defined(__clang__)
        -:  508:
        -:  509:#  define GTEST_HAS_RTTI __has_feature(cxx_rtti)
        -:  510:
        -:  511:// Starting with version 9.0 IBM Visual Age defines __RTTI_ALL__ to 1 if
        -:  512:// both the typeid and dynamic_cast features are present.
        -:  513:# elif defined(__IBMCPP__) && (__IBMCPP__ >= 900)
        -:  514:
        -:  515:#  ifdef __RTTI_ALL__
        -:  516:#   define GTEST_HAS_RTTI 1
        -:  517:#  else
        -:  518:#   define GTEST_HAS_RTTI 0
        -:  519:#  endif
        -:  520:
        -:  521:# else
        -:  522:
        -:  523:// For all other compilers, we assume RTTI is enabled.
        -:  524:#  define GTEST_HAS_RTTI 1
        -:  525:
        -:  526:# endif  // _MSC_VER
        -:  527:
        -:  528:#endif  // GTEST_HAS_RTTI
        -:  529:
        -:  530:// It's this header's responsibility to #include <typeinfo> when RTTI
        -:  531:// is enabled.
        -:  532:#if GTEST_HAS_RTTI
        -:  533:# include <typeinfo>
        -:  534:#endif
        -:  535:
        -:  536:// Determines whether Google Test can use the pthreads library.
        -:  537:#ifndef GTEST_HAS_PTHREAD
        -:  538:// The user didn't tell us explicitly, so we make reasonable assumptions about
        -:  539:// which platforms have pthreads support.
        -:  540://
        -:  541:// To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0
        -:  542:// to your compiler flags.
        -:  543:#define GTEST_HAS_PTHREAD                                                      \
        -:  544:  (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX || GTEST_OS_QNX ||          \
        -:  545:   GTEST_OS_FREEBSD || GTEST_OS_NACL || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA || \
        -:  546:   GTEST_OS_DRAGONFLY || GTEST_OS_GNU_KFREEBSD || GTEST_OS_OPENBSD ||          \
        -:  547:   GTEST_OS_HAIKU || GTEST_OS_GNU_HURD)
        -:  548:#endif  // GTEST_HAS_PTHREAD
        -:  549:
        -:  550:#if GTEST_HAS_PTHREAD
        -:  551:// gtest-port.h guarantees to #include <pthread.h> when GTEST_HAS_PTHREAD is
        -:  552:// true.
        -:  553:# include <pthread.h>  // NOLINT
        -:  554:# include <sched.h>    // NOLINT
        -:  555:
        -:  556:// For timespec and nanosleep, used below.
        -:  557:# include <time.h>  // NOLINT
        -:  558:#endif
        -:  559:
        -:  560:// Determines whether clone(2) is supported.
        -:  561:// Usually it will only be available on Linux, excluding
        -:  562:// Linux on the Itanium architecture.
        -:  563:// Also see http://linux.die.net/man/2/clone.
        -:  564:#ifndef GTEST_HAS_CLONE
        -:  565:// The user didn't tell us, so we need to figure it out.
        -:  566:
        -:  567:# if GTEST_OS_LINUX && !defined(__ia64__)
        -:  568:#  if GTEST_OS_LINUX_ANDROID
        -:  569:// On Android, clone() became available at different API levels for each 32-bit
        -:  570:// architecture.
        -:  571:#    if defined(__LP64__) || \
        -:  572:        (defined(__arm__) && __ANDROID_API__ >= 9) || \
        -:  573:        (defined(__mips__) && __ANDROID_API__ >= 12) || \
        -:  574:        (defined(__i386__) && __ANDROID_API__ >= 17)
        -:  575:#     define GTEST_HAS_CLONE 1
        -:  576:#    else
        -:  577:#     define GTEST_HAS_CLONE 0
        -:  578:#    endif
        -:  579:#  else
        -:  580:#   define GTEST_HAS_CLONE 1
        -:  581:#  endif
        -:  582:# else
        -:  583:#  define GTEST_HAS_CLONE 0
        -:  584:# endif  // GTEST_OS_LINUX && !defined(__ia64__)
        -:  585:
        -:  586:#endif  // GTEST_HAS_CLONE
        -:  587:
        -:  588:// Determines whether to support stream redirection. This is used to test
        -:  589:// output correctness and to implement death tests.
        -:  590:#ifndef GTEST_HAS_STREAM_REDIRECTION
        -:  591:// By default, we assume that stream redirection is supported on all
        -:  592:// platforms except known mobile ones.
        -:  593:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE || \
        -:  594:    GTEST_OS_WINDOWS_RT || GTEST_OS_ESP8266
        -:  595:#  define GTEST_HAS_STREAM_REDIRECTION 0
        -:  596:# else
        -:  597:#  define GTEST_HAS_STREAM_REDIRECTION 1
        -:  598:# endif  // !GTEST_OS_WINDOWS_MOBILE
        -:  599:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -:  600:
        -:  601:// Determines whether to support death tests.
        -:  602:// pops up a dialog window that cannot be suppressed programmatically.
        -:  603:#if (GTEST_OS_LINUX || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS ||             \
        -:  604:     (GTEST_OS_MAC && !GTEST_OS_IOS) ||                                   \
        -:  605:     (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER) || GTEST_OS_WINDOWS_MINGW ||  \
        -:  606:     GTEST_OS_AIX || GTEST_OS_HPUX || GTEST_OS_OPENBSD || GTEST_OS_QNX || \
        -:  607:     GTEST_OS_FREEBSD || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA ||           \
        -:  608:     GTEST_OS_DRAGONFLY || GTEST_OS_GNU_KFREEBSD || GTEST_OS_HAIKU ||     \
        -:  609:     GTEST_OS_GNU_HURD)
        -:  610:# define GTEST_HAS_DEATH_TEST 1
        -:  611:#endif
        -:  612:
        -:  613:// Determines whether to support type-driven tests.
        -:  614:
        -:  615:// Typed tests need <typeinfo> and variadic macros, which GCC, VC++ 8.0,
        -:  616:// Sun Pro CC, IBM Visual Age, and HP aCC support.
        -:  617:#if defined(__GNUC__) || defined(_MSC_VER) || defined(__SUNPRO_CC) || \
        -:  618:    defined(__IBMCPP__) || defined(__HP_aCC)
        -:  619:# define GTEST_HAS_TYPED_TEST 1
        -:  620:# define GTEST_HAS_TYPED_TEST_P 1
        -:  621:#endif
        -:  622:
        -:  623:// Determines whether the system compiler uses UTF-16 for encoding wide strings.
        -:  624:#define GTEST_WIDE_STRING_USES_UTF16_ \
        -:  625:  (GTEST_OS_WINDOWS || GTEST_OS_CYGWIN || GTEST_OS_AIX || GTEST_OS_OS2)
        -:  626:
        -:  627:// Determines whether test results can be streamed to a socket.
        -:  628:#if GTEST_OS_LINUX || GTEST_OS_GNU_KFREEBSD || GTEST_OS_DRAGONFLY || \
        -:  629:    GTEST_OS_FREEBSD || GTEST_OS_NETBSD || GTEST_OS_OPENBSD ||       \
        -:  630:    GTEST_OS_GNU_HURD
        -:  631:# define GTEST_CAN_STREAM_RESULTS_ 1
        -:  632:#endif
        -:  633:
        -:  634:// Defines some utility macros.
        -:  635:
        -:  636:// The GNU compiler emits a warning if nested "if" statements are followed by
        -:  637:// an "else" statement and braces are not used to explicitly disambiguate the
        -:  638:// "else" binding.  This leads to problems with code like:
        -:  639://
        -:  640://   if (gate)
        -:  641://     ASSERT_*(condition) << "Some message";
        -:  642://
        -:  643:// The "switch (0) case 0:" idiom is used to suppress this.
        -:  644:#ifdef __INTEL_COMPILER
        -:  645:# define GTEST_AMBIGUOUS_ELSE_BLOCKER_
        -:  646:#else
        -:  647:# define GTEST_AMBIGUOUS_ELSE_BLOCKER_ switch (0) case 0: default:  // NOLINT
        -:  648:#endif
        -:  649:
        -:  650:// Use this annotation at the end of a struct/class definition to
        -:  651:// prevent the compiler from optimizing away instances that are never
        -:  652:// used.  This is useful when all interesting logic happens inside the
        -:  653:// c'tor and / or d'tor.  Example:
        -:  654://
        -:  655://   struct Foo {
        -:  656://     Foo() { ... }
        -:  657://   } GTEST_ATTRIBUTE_UNUSED_;
        -:  658://
        -:  659:// Also use it after a variable or parameter declaration to tell the
        -:  660:// compiler the variable/parameter does not have to be used.
        -:  661:#if defined(__GNUC__) && !defined(COMPILER_ICC)
        -:  662:# define GTEST_ATTRIBUTE_UNUSED_ __attribute__ ((unused))
        -:  663:#elif defined(__clang__)
        -:  664:# if __has_attribute(unused)
        -:  665:#  define GTEST_ATTRIBUTE_UNUSED_ __attribute__ ((unused))
        -:  666:# endif
        -:  667:#endif
        -:  668:#ifndef GTEST_ATTRIBUTE_UNUSED_
        -:  669:# define GTEST_ATTRIBUTE_UNUSED_
        -:  670:#endif
        -:  671:
        -:  672:// Use this annotation before a function that takes a printf format string.
        -:  673:#if (defined(__GNUC__) || defined(__clang__)) && !defined(COMPILER_ICC)
        -:  674:# if defined(__MINGW_PRINTF_FORMAT)
        -:  675:// MinGW has two different printf implementations. Ensure the format macro
        -:  676:// matches the selected implementation. See
        -:  677:// https://sourceforge.net/p/mingw-w64/wiki2/gnu%20printf/.
        -:  678:#  define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check) \
        -:  679:       __attribute__((__format__(__MINGW_PRINTF_FORMAT, string_index, \
        -:  680:                                 first_to_check)))
        -:  681:# else
        -:  682:#  define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check) \
        -:  683:       __attribute__((__format__(__printf__, string_index, first_to_check)))
        -:  684:# endif
        -:  685:#else
        -:  686:# define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check)
        -:  687:#endif
        -:  688:
        -:  689:
        -:  690:// A macro to disallow copy operator=
        -:  691:// This should be used in the private: declarations for a class.
        -:  692:#define GTEST_DISALLOW_ASSIGN_(type) \
        -:  693:  type& operator=(type const &) = delete
        -:  694:
        -:  695:// A macro to disallow copy constructor and operator=
        -:  696:// This should be used in the private: declarations for a class.
        -:  697:#define GTEST_DISALLOW_COPY_AND_ASSIGN_(type) \
        -:  698:  type(type const&) = delete;                 \
        -:  699:  type& operator=(type const&) = delete
        -:  700:
        -:  701:// A macro to disallow move operator=
        -:  702:// This should be used in the private: declarations for a class.
        -:  703:#define GTEST_DISALLOW_MOVE_ASSIGN_(type) \
        -:  704:  type& operator=(type &&) noexcept = delete
        -:  705:
        -:  706:// A macro to disallow move constructor and operator=
        -:  707:// This should be used in the private: declarations for a class.
        -:  708:#define GTEST_DISALLOW_MOVE_AND_ASSIGN_(type) \
        -:  709:  type(type&&) noexcept = delete;             \
        -:  710:  type& operator=(type&&) noexcept = delete
        -:  711:
        -:  712:// Tell the compiler to warn about unused return values for functions declared
        -:  713:// with this macro.  The macro should be used on function declarations
        -:  714:// following the argument list:
        -:  715://
        -:  716://   Sprocket* AllocateSprocket() GTEST_MUST_USE_RESULT_;
        -:  717:#if defined(__GNUC__) && !defined(COMPILER_ICC)
        -:  718:# define GTEST_MUST_USE_RESULT_ __attribute__ ((warn_unused_result))
        -:  719:#else
        -:  720:# define GTEST_MUST_USE_RESULT_
        -:  721:#endif  // __GNUC__ && !COMPILER_ICC
        -:  722:
        -:  723:// MS C++ compiler emits warning when a conditional expression is compile time
        -:  724:// constant. In some contexts this warning is false positive and needs to be
        -:  725:// suppressed. Use the following two macros in such cases:
        -:  726://
        -:  727:// GTEST_INTENTIONAL_CONST_COND_PUSH_()
        -:  728:// while (true) {
        -:  729:// GTEST_INTENTIONAL_CONST_COND_POP_()
        -:  730:// }
        -:  731:# define GTEST_INTENTIONAL_CONST_COND_PUSH_() \
        -:  732:    GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127)
        -:  733:# define GTEST_INTENTIONAL_CONST_COND_POP_() \
        -:  734:    GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  735:
        -:  736:// Determine whether the compiler supports Microsoft's Structured Exception
        -:  737:// Handling.  This is supported by several Windows compilers but generally
        -:  738:// does not exist on any other system.
        -:  739:#ifndef GTEST_HAS_SEH
        -:  740:// The user didn't tell us, so we need to figure it out.
        -:  741:
        -:  742:# if defined(_MSC_VER) || defined(__BORLANDC__)
        -:  743:// These two compilers are known to support SEH.
        -:  744:#  define GTEST_HAS_SEH 1
        -:  745:# else
        -:  746:// Assume no SEH.
        -:  747:#  define GTEST_HAS_SEH 0
        -:  748:# endif
        -:  749:
        -:  750:#endif  // GTEST_HAS_SEH
        -:  751:
        -:  752:#ifndef GTEST_IS_THREADSAFE
        -:  753:
        -:  754:#define GTEST_IS_THREADSAFE                                                 \
        -:  755:  (GTEST_HAS_MUTEX_AND_THREAD_LOCAL_ ||                                     \
        -:  756:   (GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT) || \
        -:  757:   GTEST_HAS_PTHREAD)
        -:  758:
        -:  759:#endif  // GTEST_IS_THREADSAFE
        -:  760:
        -:  761:// GTEST_API_ qualifies all symbols that must be exported. The definitions below
        -:  762:// are guarded by #ifndef to give embedders a chance to define GTEST_API_ in
        -:  763:// gtest/internal/custom/gtest-port.h
        -:  764:#ifndef GTEST_API_
        -:  765:
        -:  766:#ifdef _MSC_VER
        -:  767:# if GTEST_LINKED_AS_SHARED_LIBRARY
        -:  768:#  define GTEST_API_ __declspec(dllimport)
        -:  769:# elif GTEST_CREATE_SHARED_LIBRARY
        -:  770:#  define GTEST_API_ __declspec(dllexport)
        -:  771:# endif
        -:  772:#elif __GNUC__ >= 4 || defined(__clang__)
        -:  773:# define GTEST_API_ __attribute__((visibility ("default")))
        -:  774:#endif  // _MSC_VER
        -:  775:
        -:  776:#endif  // GTEST_API_
        -:  777:
        -:  778:#ifndef GTEST_API_
        -:  779:# define GTEST_API_
        -:  780:#endif  // GTEST_API_
        -:  781:
        -:  782:#ifndef GTEST_DEFAULT_DEATH_TEST_STYLE
        -:  783:# define GTEST_DEFAULT_DEATH_TEST_STYLE  "fast"
        -:  784:#endif  // GTEST_DEFAULT_DEATH_TEST_STYLE
        -:  785:
        -:  786:#ifdef __GNUC__
        -:  787:// Ask the compiler to never inline a given function.
        -:  788:# define GTEST_NO_INLINE_ __attribute__((noinline))
        -:  789:#else
        -:  790:# define GTEST_NO_INLINE_
        -:  791:#endif
        -:  792:
        -:  793:// _LIBCPP_VERSION is defined by the libc++ library from the LLVM project.
        -:  794:#if !defined(GTEST_HAS_CXXABI_H_)
        -:  795:# if defined(__GLIBCXX__) || (defined(_LIBCPP_VERSION) && !defined(_MSC_VER))
        -:  796:#  define GTEST_HAS_CXXABI_H_ 1
        -:  797:# else
        -:  798:#  define GTEST_HAS_CXXABI_H_ 0
        -:  799:# endif
        -:  800:#endif
        -:  801:
        -:  802:// A function level attribute to disable checking for use of uninitialized
        -:  803:// memory when built with MemorySanitizer.
        -:  804:#if defined(__clang__)
        -:  805:# if __has_feature(memory_sanitizer)
        -:  806:#  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ \
        -:  807:       __attribute__((no_sanitize_memory))
        -:  808:# else
        -:  809:#  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:  810:# endif  // __has_feature(memory_sanitizer)
        -:  811:#else
        -:  812:# define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:  813:#endif  // __clang__
        -:  814:
        -:  815:// A function level attribute to disable AddressSanitizer instrumentation.
        -:  816:#if defined(__clang__)
        -:  817:# if __has_feature(address_sanitizer)
        -:  818:#  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ \
        -:  819:       __attribute__((no_sanitize_address))
        -:  820:# else
        -:  821:#  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:  822:# endif  // __has_feature(address_sanitizer)
        -:  823:#else
        -:  824:# define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:  825:#endif  // __clang__
        -:  826:
        -:  827:// A function level attribute to disable HWAddressSanitizer instrumentation.
        -:  828:#if defined(__clang__)
        -:  829:# if __has_feature(hwaddress_sanitizer)
        -:  830:#  define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_ \
        -:  831:       __attribute__((no_sanitize("hwaddress")))
        -:  832:# else
        -:  833:#  define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_
        -:  834:# endif  // __has_feature(hwaddress_sanitizer)
        -:  835:#else
        -:  836:# define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_
        -:  837:#endif  // __clang__
        -:  838:
        -:  839:// A function level attribute to disable ThreadSanitizer instrumentation.
        -:  840:#if defined(__clang__)
        -:  841:# if __has_feature(thread_sanitizer)
        -:  842:#  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ \
        -:  843:       __attribute__((no_sanitize_thread))
        -:  844:# else
        -:  845:#  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
        -:  846:# endif  // __has_feature(thread_sanitizer)
        -:  847:#else
        -:  848:# define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
        -:  849:#endif  // __clang__
        -:  850:
        -:  851:namespace testing {
        -:  852:
        -:  853:class Message;
        -:  854:
        -:  855:// Legacy imports for backwards compatibility.
        -:  856:// New code should use std:: names directly.
        -:  857:using std::get;
        -:  858:using std::make_tuple;
        -:  859:using std::tuple;
        -:  860:using std::tuple_element;
        -:  861:using std::tuple_size;
        -:  862:
        -:  863:namespace internal {
        -:  864:
        -:  865:// A secret type that Google Test users don't know about.  It has no
        -:  866:// definition on purpose.  Therefore it's impossible to create a
        -:  867:// Secret object, which is what we want.
        -:  868:class Secret;
        -:  869:
        -:  870:// The GTEST_COMPILE_ASSERT_ is a legacy macro used to verify that a compile
        -:  871:// time expression is true (in new code, use static_assert instead). For
        -:  872:// example, you could use it to verify the size of a static array:
        -:  873://
        -:  874://   GTEST_COMPILE_ASSERT_(GTEST_ARRAY_SIZE_(names) == NUM_NAMES,
        -:  875://                         names_incorrect_size);
        -:  876://
        -:  877:// The second argument to the macro must be a valid C++ identifier. If the
        -:  878:// expression is false, compiler will issue an error containing this identifier.
        -:  879:#define GTEST_COMPILE_ASSERT_(expr, msg) static_assert(expr, #msg)
        -:  880:
        -:  881:// A helper for suppressing warnings on constant condition.  It just
        -:  882:// returns 'condition'.
        -:  883:GTEST_API_ bool IsTrue(bool condition);
        -:  884:
        -:  885:// Defines RE.
        -:  886:
        -:  887:#if GTEST_USES_PCRE
        -:  888:// if used, PCRE is injected by custom/gtest-port.h
        -:  889:#elif GTEST_USES_POSIX_RE || GTEST_USES_SIMPLE_RE
        -:  890:
        -:  891:// A simple C++ wrapper for <regex.h>.  It uses the POSIX Extended
        -:  892:// Regular Expression syntax.
        -:  893:class GTEST_API_ RE {
        -:  894: public:
        -:  895:  // A copy constructor is required by the Standard to initialize object
        -:  896:  // references from r-values.
        -:  897:  RE(const RE& other) { Init(other.pattern()); }
        -:  898:
        -:  899:  // Constructs an RE from a string.
        -:  900:  RE(const ::std::string& regex) { Init(regex.c_str()); }  // NOLINT
        -:  901:
        -:  902:  RE(const char* regex) { Init(regex); }  // NOLINT
        -:  903:  ~RE();
        -:  904:
        -:  905:  // Returns the string representation of the regex.
        -:  906:  const char* pattern() const { return pattern_; }
        -:  907:
        -:  908:  // FullMatch(str, re) returns true if and only if regular expression re
        -:  909:  // matches the entire str.
        -:  910:  // PartialMatch(str, re) returns true if and only if regular expression re
        -:  911:  // matches a substring of str (including str itself).
        -:  912:  static bool FullMatch(const ::std::string& str, const RE& re) {
        -:  913:    return FullMatch(str.c_str(), re);
        -:  914:  }
        -:  915:  static bool PartialMatch(const ::std::string& str, const RE& re) {
        -:  916:    return PartialMatch(str.c_str(), re);
        -:  917:  }
        -:  918:
        -:  919:  static bool FullMatch(const char* str, const RE& re);
        -:  920:  static bool PartialMatch(const char* str, const RE& re);
        -:  921:
        -:  922: private:
        -:  923:  void Init(const char* regex);
        -:  924:  const char* pattern_;
        -:  925:  bool is_valid_;
        -:  926:
        -:  927:# if GTEST_USES_POSIX_RE
        -:  928:
        -:  929:  regex_t full_regex_;     // For FullMatch().
        -:  930:  regex_t partial_regex_;  // For PartialMatch().
        -:  931:
        -:  932:# else  // GTEST_USES_SIMPLE_RE
        -:  933:
        -:  934:  const char* full_pattern_;  // For FullMatch();
        -:  935:
        -:  936:# endif
        -:  937:};
        -:  938:
        -:  939:#endif  // GTEST_USES_PCRE
        -:  940:
        -:  941:// Formats a source file path and a line number as they would appear
        -:  942:// in an error message from the compiler used to compile this code.
        -:  943:GTEST_API_ ::std::string FormatFileLocation(const char* file, int line);
        -:  944:
        -:  945:// Formats a file location for compiler-independent XML output.
        -:  946:// Although this function is not platform dependent, we put it next to
        -:  947:// FormatFileLocation in order to contrast the two functions.
        -:  948:GTEST_API_ ::std::string FormatCompilerIndependentFileLocation(const char* file,
        -:  949:                                                               int line);
        -:  950:
        -:  951:// Defines logging utilities:
        -:  952://   GTEST_LOG_(severity) - logs messages at the specified severity level. The
        -:  953://                          message itself is streamed into the macro.
        -:  954://   LogToStderr()  - directs all log messages to stderr.
        -:  955://   FlushInfoLog() - flushes informational log messages.
        -:  956:
        -:  957:enum GTestLogSeverity {
        -:  958:  GTEST_INFO,
        -:  959:  GTEST_WARNING,
        -:  960:  GTEST_ERROR,
        -:  961:  GTEST_FATAL
        -:  962:};
        -:  963:
        -:  964:// Formats log entry severity, provides a stream object for streaming the
        -:  965:// log message, and terminates the message with a newline when going out of
        -:  966:// scope.
        -:  967:class GTEST_API_ GTestLog {
        -:  968: public:
        -:  969:  GTestLog(GTestLogSeverity severity, const char* file, int line);
        -:  970:
        -:  971:  // Flushes the buffers and, if severity is GTEST_FATAL, aborts the program.
        -:  972:  ~GTestLog();
        -:  973:
    #####:  974:  ::std::ostream& GetStream() { return ::std::cerr; }
        -:  975:
        -:  976: private:
        -:  977:  const GTestLogSeverity severity_;
        -:  978:
        -:  979:  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestLog);
        -:  980:};
        -:  981:
        -:  982:#if !defined(GTEST_LOG_)
        -:  983:
        -:  984:# define GTEST_LOG_(severity) \
        -:  985:    ::testing::internal::GTestLog(::testing::internal::GTEST_##severity, \
        -:  986:                                  __FILE__, __LINE__).GetStream()
        -:  987:
        -:  988:inline void LogToStderr() {}
        -:  989:inline void FlushInfoLog() { fflush(nullptr); }
        -:  990:
        -:  991:#endif  // !defined(GTEST_LOG_)
        -:  992:
        -:  993:#if !defined(GTEST_CHECK_)
        -:  994:// INTERNAL IMPLEMENTATION - DO NOT USE.
        -:  995://
        -:  996:// GTEST_CHECK_ is an all-mode assert. It aborts the program if the condition
        -:  997:// is not satisfied.
        -:  998://  Synopsys:
        -:  999://    GTEST_CHECK_(boolean_condition);
        -: 1000://     or
        -: 1001://    GTEST_CHECK_(boolean_condition) << "Additional message";
        -: 1002://
        -: 1003://    This checks the condition and if the condition is not satisfied
        -: 1004://    it prints message about the condition violation, including the
        -: 1005://    condition itself, plus additional message streamed into it, if any,
        -: 1006://    and then it aborts the program. It aborts the program irrespective of
        -: 1007://    whether it is built in the debug mode or not.
        -: 1008:# define GTEST_CHECK_(condition) \
        -: 1009:    GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
        -: 1010:    if (::testing::internal::IsTrue(condition)) \
        -: 1011:      ; \
        -: 1012:    else \
        -: 1013:      GTEST_LOG_(FATAL) << "Condition " #condition " failed. "
        -: 1014:#endif  // !defined(GTEST_CHECK_)
        -: 1015:
        -: 1016:// An all-mode assert to verify that the given POSIX-style function
        -: 1017:// call returns 0 (indicating success).  Known limitation: this
        -: 1018:// doesn't expand to a balanced 'if' statement, so enclose the macro
        -: 1019:// in {} if you need to use it as the only statement in an 'if'
        -: 1020:// branch.
        -: 1021:#define GTEST_CHECK_POSIX_SUCCESS_(posix_call) \
        -: 1022:  if (const int gtest_error = (posix_call)) \
        -: 1023:    GTEST_LOG_(FATAL) << #posix_call << "failed with error " \
        -: 1024:                      << gtest_error
        -: 1025:
        -: 1026:// Transforms "T" into "const T&" according to standard reference collapsing
        -: 1027:// rules (this is only needed as a backport for C++98 compilers that do not
        -: 1028:// support reference collapsing). Specifically, it transforms:
        -: 1029://
        -: 1030://   char         ==> const char&
        -: 1031://   const char   ==> const char&
        -: 1032://   char&        ==> char&
        -: 1033://   const char&  ==> const char&
        -: 1034://
        -: 1035:// Note that the non-const reference will not have "const" added. This is
        -: 1036:// standard, and necessary so that "T" can always bind to "const T&".
        -: 1037:template <typename T>
        -: 1038:struct ConstRef { typedef const T& type; };
        -: 1039:template <typename T>
        -: 1040:struct ConstRef<T&> { typedef T& type; };
        -: 1041:
        -: 1042:// The argument T must depend on some template parameters.
        -: 1043:#define GTEST_REFERENCE_TO_CONST_(T) \
        -: 1044:  typename ::testing::internal::ConstRef<T>::type
        -: 1045:
        -: 1046:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
        -: 1047://
        -: 1048:// Use ImplicitCast_ as a safe version of static_cast for upcasting in
        -: 1049:// the type hierarchy (e.g. casting a Foo* to a SuperclassOfFoo* or a
        -: 1050:// const Foo*).  When you use ImplicitCast_, the compiler checks that
        -: 1051:// the cast is safe.  Such explicit ImplicitCast_s are necessary in
        -: 1052:// surprisingly many situations where C++ demands an exact type match
        -: 1053:// instead of an argument type convertable to a target type.
        -: 1054://
        -: 1055:// The syntax for using ImplicitCast_ is the same as for static_cast:
        -: 1056://
        -: 1057://   ImplicitCast_<ToType>(expr)
        -: 1058://
        -: 1059:// ImplicitCast_ would have been part of the C++ standard library,
        -: 1060:// but the proposal was submitted too late.  It will probably make
        -: 1061:// its way into the language in the future.
        -: 1062://
        -: 1063:// This relatively ugly name is intentional. It prevents clashes with
        -: 1064:// similar functions users may have (e.g., implicit_cast). The internal
        -: 1065:// namespace alone is not enough because the function can be found by ADL.
        -: 1066:template<typename To>
        -: 1067:inline To ImplicitCast_(To x) { return x; }
        -: 1068:
        -: 1069:// When you upcast (that is, cast a pointer from type Foo to type
        -: 1070:// SuperclassOfFoo), it's fine to use ImplicitCast_<>, since upcasts
        -: 1071:// always succeed.  When you downcast (that is, cast a pointer from
        -: 1072:// type Foo to type SubclassOfFoo), static_cast<> isn't safe, because
        -: 1073:// how do you know the pointer is really of type SubclassOfFoo?  It
        -: 1074:// could be a bare Foo, or of type DifferentSubclassOfFoo.  Thus,
        -: 1075:// when you downcast, you should use this macro.  In debug mode, we
        -: 1076:// use dynamic_cast<> to double-check the downcast is legal (we die
        -: 1077:// if it's not).  In normal mode, we do the efficient static_cast<>
        -: 1078:// instead.  Thus, it's important to test in debug mode to make sure
        -: 1079:// the cast is legal!
        -: 1080://    This is the only place in the code we should use dynamic_cast<>.
        -: 1081:// In particular, you SHOULDN'T be using dynamic_cast<> in order to
        -: 1082:// do RTTI (eg code like this:
        -: 1083://    if (dynamic_cast<Subclass1>(foo)) HandleASubclass1Object(foo);
        -: 1084://    if (dynamic_cast<Subclass2>(foo)) HandleASubclass2Object(foo);
        -: 1085:// You should design the code some other way not to need this.
        -: 1086://
        -: 1087:// This relatively ugly name is intentional. It prevents clashes with
        -: 1088:// similar functions users may have (e.g., down_cast). The internal
        -: 1089:// namespace alone is not enough because the function can be found by ADL.
        -: 1090:template<typename To, typename From>  // use like this: DownCast_<T*>(foo);
        -: 1091:inline To DownCast_(From* f) {  // so we only accept pointers
        -: 1092:  // Ensures that To is a sub-type of From *.  This test is here only
        -: 1093:  // for compile-time type checking, and has no overhead in an
        -: 1094:  // optimized build at run-time, as it will be optimized away
        -: 1095:  // completely.
        -: 1096:  GTEST_INTENTIONAL_CONST_COND_PUSH_()
        -: 1097:  if (false) {
        -: 1098:  GTEST_INTENTIONAL_CONST_COND_POP_()
        -: 1099:  const To to = nullptr;
        -: 1100:  ::testing::internal::ImplicitCast_<From*>(to);
        -: 1101:  }
        -: 1102:
        -: 1103:#if GTEST_HAS_RTTI
        -: 1104:  // RTTI: debug mode only!
        -: 1105:  GTEST_CHECK_(f == nullptr || dynamic_cast<To>(f) != nullptr);
        -: 1106:#endif
        -: 1107:  return static_cast<To>(f);
        -: 1108:}
        -: 1109:
        -: 1110:// Downcasts the pointer of type Base to Derived.
        -: 1111:// Derived must be a subclass of Base. The parameter MUST
        -: 1112:// point to a class of type Derived, not any subclass of it.
        -: 1113:// When RTTI is available, the function performs a runtime
        -: 1114:// check to enforce this.
        -: 1115:template <class Derived, class Base>
        -: 1116:Derived* CheckedDowncastToActualType(Base* base) {
        -: 1117:#if GTEST_HAS_RTTI
        -: 1118:  GTEST_CHECK_(typeid(*base) == typeid(Derived));
        -: 1119:#endif
        -: 1120:
        -: 1121:#if GTEST_HAS_DOWNCAST_
        -: 1122:  return ::down_cast<Derived*>(base);
        -: 1123:#elif GTEST_HAS_RTTI
        -: 1124:  return dynamic_cast<Derived*>(base);  // NOLINT
        -: 1125:#else
        -: 1126:  return static_cast<Derived*>(base);  // Poor man's downcast.
        -: 1127:#endif
        -: 1128:}
        -: 1129:
        -: 1130:#if GTEST_HAS_STREAM_REDIRECTION
        -: 1131:
        -: 1132:// Defines the stderr capturer:
        -: 1133://   CaptureStdout     - starts capturing stdout.
        -: 1134://   GetCapturedStdout - stops capturing stdout and returns the captured string.
        -: 1135://   CaptureStderr     - starts capturing stderr.
        -: 1136://   GetCapturedStderr - stops capturing stderr and returns the captured string.
        -: 1137://
        -: 1138:GTEST_API_ void CaptureStdout();
        -: 1139:GTEST_API_ std::string GetCapturedStdout();
        -: 1140:GTEST_API_ void CaptureStderr();
        -: 1141:GTEST_API_ std::string GetCapturedStderr();
        -: 1142:
        -: 1143:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -: 1144:// Returns the size (in bytes) of a file.
        -: 1145:GTEST_API_ size_t GetFileSize(FILE* file);
        -: 1146:
        -: 1147:// Reads the entire content of a file as a string.
        -: 1148:GTEST_API_ std::string ReadEntireFile(FILE* file);
        -: 1149:
        -: 1150:// All command line arguments.
        -: 1151:GTEST_API_ std::vector<std::string> GetArgvs();
        -: 1152:
        -: 1153:#if GTEST_HAS_DEATH_TEST
        -: 1154:
        -: 1155:std::vector<std::string> GetInjectableArgvs();
        -: 1156:// Deprecated: pass the args vector by value instead.
        -: 1157:void SetInjectableArgvs(const std::vector<std::string>* new_argvs);
        -: 1158:void SetInjectableArgvs(const std::vector<std::string>& new_argvs);
        -: 1159:void ClearInjectableArgvs();
        -: 1160:
        -: 1161:#endif  // GTEST_HAS_DEATH_TEST
        -: 1162:
        -: 1163:// Defines synchronization primitives.
        -: 1164:#if GTEST_IS_THREADSAFE
        -: 1165:# if GTEST_HAS_PTHREAD
        -: 1166:// Sleeps for (roughly) n milliseconds.  This function is only for testing
        -: 1167:// Google Test's own constructs.  Don't use it in user tests, either
        -: 1168:// directly or indirectly.
        -: 1169:inline void SleepMilliseconds(int n) {
        -: 1170:  const timespec time = {
        -: 1171:    0,                  // 0 seconds.
        -: 1172:    n * 1000L * 1000L,  // And n ms.
        -: 1173:  };
        -: 1174:  nanosleep(&time, nullptr);
        -: 1175:}
        -: 1176:# endif  // GTEST_HAS_PTHREAD
        -: 1177:
        -: 1178:# if GTEST_HAS_NOTIFICATION_
        -: 1179:// Notification has already been imported into the namespace.
        -: 1180:// Nothing to do here.
        -: 1181:
        -: 1182:# elif GTEST_HAS_PTHREAD
        -: 1183:// Allows a controller thread to pause execution of newly created
        -: 1184:// threads until notified.  Instances of this class must be created
        -: 1185:// and destroyed in the controller thread.
        -: 1186://
        -: 1187:// This class is only for testing Google Test's own constructs. Do not
        -: 1188:// use it in user tests, either directly or indirectly.
        -: 1189:class Notification {
        -: 1190: public:
        -: 1191:  Notification() : notified_(false) {
        -: 1192:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_init(&mutex_, nullptr));
        -: 1193:  }
        -: 1194:  ~Notification() {
        -: 1195:    pthread_mutex_destroy(&mutex_);
        -: 1196:  }
        -: 1197:
        -: 1198:  // Notifies all threads created with this notification to start. Must
        -: 1199:  // be called from the controller thread.
        -: 1200:  void Notify() {
        -: 1201:    pthread_mutex_lock(&mutex_);
        -: 1202:    notified_ = true;
        -: 1203:    pthread_mutex_unlock(&mutex_);
        -: 1204:  }
        -: 1205:
        -: 1206:  // Blocks until the controller thread notifies. Must be called from a test
        -: 1207:  // thread.
        -: 1208:  void WaitForNotification() {
        -: 1209:    for (;;) {
        -: 1210:      pthread_mutex_lock(&mutex_);
        -: 1211:      const bool notified = notified_;
        -: 1212:      pthread_mutex_unlock(&mutex_);
        -: 1213:      if (notified)
        -: 1214:        break;
        -: 1215:      SleepMilliseconds(10);
        -: 1216:    }
        -: 1217:  }
        -: 1218:
        -: 1219: private:
        -: 1220:  pthread_mutex_t mutex_;
        -: 1221:  bool notified_;
        -: 1222:
        -: 1223:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Notification);
        -: 1224:};
        -: 1225:
        -: 1226:# elif GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 1227:
        -: 1228:GTEST_API_ void SleepMilliseconds(int n);
        -: 1229:
        -: 1230:// Provides leak-safe Windows kernel handle ownership.
        -: 1231:// Used in death tests and in threading support.
        -: 1232:class GTEST_API_ AutoHandle {
        -: 1233: public:
        -: 1234:  // Assume that Win32 HANDLE type is equivalent to void*. Doing so allows us to
        -: 1235:  // avoid including <windows.h> in this header file. Including <windows.h> is
        -: 1236:  // undesirable because it defines a lot of symbols and macros that tend to
        -: 1237:  // conflict with client code. This assumption is verified by
        -: 1238:  // WindowsTypesTest.HANDLEIsVoidStar.
        -: 1239:  typedef void* Handle;
        -: 1240:  AutoHandle();
        -: 1241:  explicit AutoHandle(Handle handle);
        -: 1242:
        -: 1243:  ~AutoHandle();
        -: 1244:
        -: 1245:  Handle Get() const;
        -: 1246:  void Reset();
        -: 1247:  void Reset(Handle handle);
        -: 1248:
        -: 1249: private:
        -: 1250:  // Returns true if and only if the handle is a valid handle object that can be
        -: 1251:  // closed.
        -: 1252:  bool IsCloseable() const;
        -: 1253:
        -: 1254:  Handle handle_;
        -: 1255:
        -: 1256:  GTEST_DISALLOW_COPY_AND_ASSIGN_(AutoHandle);
        -: 1257:};
        -: 1258:
        -: 1259:// Allows a controller thread to pause execution of newly created
        -: 1260:// threads until notified.  Instances of this class must be created
        -: 1261:// and destroyed in the controller thread.
        -: 1262://
        -: 1263:// This class is only for testing Google Test's own constructs. Do not
        -: 1264:// use it in user tests, either directly or indirectly.
        -: 1265:class GTEST_API_ Notification {
        -: 1266: public:
        -: 1267:  Notification();
        -: 1268:  void Notify();
        -: 1269:  void WaitForNotification();
        -: 1270:
        -: 1271: private:
        -: 1272:  AutoHandle event_;
        -: 1273:
        -: 1274:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Notification);
        -: 1275:};
        -: 1276:# endif  // GTEST_HAS_NOTIFICATION_
        -: 1277:
        -: 1278:// On MinGW, we can have both GTEST_OS_WINDOWS and GTEST_HAS_PTHREAD
        -: 1279:// defined, but we don't want to use MinGW's pthreads implementation, which
        -: 1280:// has conformance problems with some versions of the POSIX standard.
        -: 1281:# if GTEST_HAS_PTHREAD && !GTEST_OS_WINDOWS_MINGW
        -: 1282:
        -: 1283:// As a C-function, ThreadFuncWithCLinkage cannot be templated itself.
        -: 1284:// Consequently, it cannot select a correct instantiation of ThreadWithParam
        -: 1285:// in order to call its Run(). Introducing ThreadWithParamBase as a
        -: 1286:// non-templated base class for ThreadWithParam allows us to bypass this
        -: 1287:// problem.
        -: 1288:class ThreadWithParamBase {
        -: 1289: public:
        -: 1290:  virtual ~ThreadWithParamBase() {}
        -: 1291:  virtual void Run() = 0;
        -: 1292:};
        -: 1293:
        -: 1294:// pthread_create() accepts a pointer to a function type with the C linkage.
        -: 1295:// According to the Standard (7.5/1), function types with different linkages
        -: 1296:// are different even if they are otherwise identical.  Some compilers (for
        -: 1297:// example, SunStudio) treat them as different types.  Since class methods
        -: 1298:// cannot be defined with C-linkage we need to define a free C-function to
        -: 1299:// pass into pthread_create().
        -: 1300:extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {
        -: 1301:  static_cast<ThreadWithParamBase*>(thread)->Run();
        -: 1302:  return nullptr;
        -: 1303:}
        -: 1304:
        -: 1305:// Helper class for testing Google Test's multi-threading constructs.
        -: 1306:// To use it, write:
        -: 1307://
        -: 1308://   void ThreadFunc(int param) { /* Do things with param */ }
        -: 1309://   Notification thread_can_start;
        -: 1310://   ...
        -: 1311://   // The thread_can_start parameter is optional; you can supply NULL.
        -: 1312://   ThreadWithParam<int> thread(&ThreadFunc, 5, &thread_can_start);
        -: 1313://   thread_can_start.Notify();
        -: 1314://
        -: 1315:// These classes are only for testing Google Test's own constructs. Do
        -: 1316:// not use them in user tests, either directly or indirectly.
        -: 1317:template <typename T>
        -: 1318:class ThreadWithParam : public ThreadWithParamBase {
        -: 1319: public:
        -: 1320:  typedef void UserThreadFunc(T);
        -: 1321:
        -: 1322:  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)
        -: 1323:      : func_(func),
        -: 1324:        param_(param),
        -: 1325:        thread_can_start_(thread_can_start),
        -: 1326:        finished_(false) {
        -: 1327:    ThreadWithParamBase* const base = this;
        -: 1328:    // The thread can be created only after all fields except thread_
        -: 1329:    // have been initialized.
        -: 1330:    GTEST_CHECK_POSIX_SUCCESS_(
        -: 1331:        pthread_create(&thread_, nullptr, &ThreadFuncWithCLinkage, base));
        -: 1332:  }
        -: 1333:  ~ThreadWithParam() override { Join(); }
        -: 1334:
        -: 1335:  void Join() {
        -: 1336:    if (!finished_) {
        -: 1337:      GTEST_CHECK_POSIX_SUCCESS_(pthread_join(thread_, nullptr));
        -: 1338:      // Yield to the joining thread to ensure its destructors are run
        -: 1339:      // before marking the thread as finished.
        -: 1340:      sched_yield();
        -: 1341:      finished_ = true;
        -: 1342:    }
        -: 1343:  }
        -: 1344:
        -: 1345:  void Run() override {
        -: 1346:    if (thread_can_start_ != nullptr) thread_can_start_->WaitForNotification();
        -: 1347:    func_(param_);
        -: 1348:  }
        -: 1349:
        -: 1350: private:
        -: 1351:  UserThreadFunc* const func_;  // User-supplied thread function.
        -: 1352:  const T param_;  // User-supplied parameter to the thread function.
        -: 1353:  // When non-NULL, used to block execution until the controller thread
        -: 1354:  // notifies.
        -: 1355:  Notification* const thread_can_start_;
        -: 1356:  bool finished_;  // true if and only if we know that the thread function has
        -: 1357:                   // finished.
        -: 1358:  pthread_t thread_;  // The native thread object.
        -: 1359:
        -: 1360:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadWithParam);
        -: 1361:};
        -: 1362:# endif  // !GTEST_OS_WINDOWS && GTEST_HAS_PTHREAD ||
        -: 1363:         // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
        -: 1364:
        -: 1365:# if GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
        -: 1366:// Mutex and ThreadLocal have already been imported into the namespace.
        -: 1367:// Nothing to do here.
        -: 1368:
        -: 1369:# elif GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 1370:
        -: 1371:// Mutex implements mutex on Windows platforms.  It is used in conjunction
        -: 1372:// with class MutexLock:
        -: 1373://
        -: 1374://   Mutex mutex;
        -: 1375://   ...
        -: 1376://   MutexLock lock(&mutex);  // Acquires the mutex and releases it at the
        -: 1377://                            // end of the current scope.
        -: 1378://
        -: 1379:// A static Mutex *must* be defined or declared using one of the following
        -: 1380:// macros:
        -: 1381://   GTEST_DEFINE_STATIC_MUTEX_(g_some_mutex);
        -: 1382://   GTEST_DECLARE_STATIC_MUTEX_(g_some_mutex);
        -: 1383://
        -: 1384:// (A non-static Mutex is defined/declared in the usual way).
        -: 1385:class GTEST_API_ Mutex {
        -: 1386: public:
        -: 1387:  enum MutexType { kStatic = 0, kDynamic = 1 };
        -: 1388:  // We rely on kStaticMutex being 0 as it is to what the linker initializes
        -: 1389:  // type_ in static mutexes.  critical_section_ will be initialized lazily
        -: 1390:  // in ThreadSafeLazyInit().
        -: 1391:  enum StaticConstructorSelector { kStaticMutex = 0 };
        -: 1392:
        -: 1393:  // This constructor intentionally does nothing.  It relies on type_ being
        -: 1394:  // statically initialized to 0 (effectively setting it to kStatic) and on
        -: 1395:  // ThreadSafeLazyInit() to lazily initialize the rest of the members.
        -: 1396:  explicit Mutex(StaticConstructorSelector /*dummy*/) {}
        -: 1397:
        -: 1398:  Mutex();
        -: 1399:  ~Mutex();
        -: 1400:
        -: 1401:  void Lock();
        -: 1402:
        -: 1403:  void Unlock();
        -: 1404:
        -: 1405:  // Does nothing if the current thread holds the mutex. Otherwise, crashes
        -: 1406:  // with high probability.
        -: 1407:  void AssertHeld();
        -: 1408:
        -: 1409: private:
        -: 1410:  // Initializes owner_thread_id_ and critical_section_ in static mutexes.
        -: 1411:  void ThreadSafeLazyInit();
        -: 1412:
        -: 1413:  // Per https://blogs.msdn.microsoft.com/oldnewthing/20040223-00/?p=40503,
        -: 1414:  // we assume that 0 is an invalid value for thread IDs.
        -: 1415:  unsigned int owner_thread_id_;
        -: 1416:
        -: 1417:  // For static mutexes, we rely on these members being initialized to zeros
        -: 1418:  // by the linker.
        -: 1419:  MutexType type_;
        -: 1420:  long critical_section_init_phase_;  // NOLINT
        -: 1421:  GTEST_CRITICAL_SECTION* critical_section_;
        -: 1422:
        -: 1423:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Mutex);
        -: 1424:};
        -: 1425:
        -: 1426:# define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1427:    extern ::testing::internal::Mutex mutex
        -: 1428:
        -: 1429:# define GTEST_DEFINE_STATIC_MUTEX_(mutex) \
        -: 1430:    ::testing::internal::Mutex mutex(::testing::internal::Mutex::kStaticMutex)
        -: 1431:
        -: 1432:// We cannot name this class MutexLock because the ctor declaration would
        -: 1433:// conflict with a macro named MutexLock, which is defined on some
        -: 1434:// platforms. That macro is used as a defensive measure to prevent against
        -: 1435:// inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than
        -: 1436:// "MutexLock l(&mu)".  Hence the typedef trick below.
        -: 1437:class GTestMutexLock {
        -: 1438: public:
        -: 1439:  explicit GTestMutexLock(Mutex* mutex)
        -: 1440:      : mutex_(mutex) { mutex_->Lock(); }
        -: 1441:
        -: 1442:  ~GTestMutexLock() { mutex_->Unlock(); }
        -: 1443:
        -: 1444: private:
        -: 1445:  Mutex* const mutex_;
        -: 1446:
        -: 1447:  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestMutexLock);
        -: 1448:};
        -: 1449:
        -: 1450:typedef GTestMutexLock MutexLock;
        -: 1451:
        -: 1452:// Base class for ValueHolder<T>.  Allows a caller to hold and delete a value
        -: 1453:// without knowing its type.
        -: 1454:class ThreadLocalValueHolderBase {
        -: 1455: public:
        -: 1456:  virtual ~ThreadLocalValueHolderBase() {}
        -: 1457:};
        -: 1458:
        -: 1459:// Provides a way for a thread to send notifications to a ThreadLocal
        -: 1460:// regardless of its parameter type.
        -: 1461:class ThreadLocalBase {
        -: 1462: public:
        -: 1463:  // Creates a new ValueHolder<T> object holding a default value passed to
        -: 1464:  // this ThreadLocal<T>'s constructor and returns it.  It is the caller's
        -: 1465:  // responsibility not to call this when the ThreadLocal<T> instance already
        -: 1466:  // has a value on the current thread.
        -: 1467:  virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const = 0;
        -: 1468:
        -: 1469: protected:
        -: 1470:  ThreadLocalBase() {}
        -: 1471:  virtual ~ThreadLocalBase() {}
        -: 1472:
        -: 1473: private:
        -: 1474:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocalBase);
        -: 1475:};
        -: 1476:
        -: 1477:// Maps a thread to a set of ThreadLocals that have values instantiated on that
        -: 1478:// thread and notifies them when the thread exits.  A ThreadLocal instance is
        -: 1479:// expected to persist until all threads it has values on have terminated.
        -: 1480:class GTEST_API_ ThreadLocalRegistry {
        -: 1481: public:
        -: 1482:  // Registers thread_local_instance as having value on the current thread.
        -: 1483:  // Returns a value that can be used to identify the thread from other threads.
        -: 1484:  static ThreadLocalValueHolderBase* GetValueOnCurrentThread(
        -: 1485:      const ThreadLocalBase* thread_local_instance);
        -: 1486:
        -: 1487:  // Invoked when a ThreadLocal instance is destroyed.
        -: 1488:  static void OnThreadLocalDestroyed(
        -: 1489:      const ThreadLocalBase* thread_local_instance);
        -: 1490:};
        -: 1491:
        -: 1492:class GTEST_API_ ThreadWithParamBase {
        -: 1493: public:
        -: 1494:  void Join();
        -: 1495:
        -: 1496: protected:
        -: 1497:  class Runnable {
        -: 1498:   public:
        -: 1499:    virtual ~Runnable() {}
        -: 1500:    virtual void Run() = 0;
        -: 1501:  };
        -: 1502:
        -: 1503:  ThreadWithParamBase(Runnable *runnable, Notification* thread_can_start);
        -: 1504:  virtual ~ThreadWithParamBase();
        -: 1505:
        -: 1506: private:
        -: 1507:  AutoHandle thread_;
        -: 1508:};
        -: 1509:
        -: 1510:// Helper class for testing Google Test's multi-threading constructs.
        -: 1511:template <typename T>
        -: 1512:class ThreadWithParam : public ThreadWithParamBase {
        -: 1513: public:
        -: 1514:  typedef void UserThreadFunc(T);
        -: 1515:
        -: 1516:  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)
        -: 1517:      : ThreadWithParamBase(new RunnableImpl(func, param), thread_can_start) {
        -: 1518:  }
        -: 1519:  virtual ~ThreadWithParam() {}
        -: 1520:
        -: 1521: private:
        -: 1522:  class RunnableImpl : public Runnable {
        -: 1523:   public:
        -: 1524:    RunnableImpl(UserThreadFunc* func, T param)
        -: 1525:        : func_(func),
        -: 1526:          param_(param) {
        -: 1527:    }
        -: 1528:    virtual ~RunnableImpl() {}
        -: 1529:    virtual void Run() {
        -: 1530:      func_(param_);
        -: 1531:    }
        -: 1532:
        -: 1533:   private:
        -: 1534:    UserThreadFunc* const func_;
        -: 1535:    const T param_;
        -: 1536:
        -: 1537:    GTEST_DISALLOW_COPY_AND_ASSIGN_(RunnableImpl);
        -: 1538:  };
        -: 1539:
        -: 1540:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadWithParam);
        -: 1541:};
        -: 1542:
        -: 1543:// Implements thread-local storage on Windows systems.
        -: 1544://
        -: 1545://   // Thread 1
        -: 1546://   ThreadLocal<int> tl(100);  // 100 is the default value for each thread.
        -: 1547://
        -: 1548://   // Thread 2
        -: 1549://   tl.set(150);  // Changes the value for thread 2 only.
        -: 1550://   EXPECT_EQ(150, tl.get());
        -: 1551://
        -: 1552://   // Thread 1
        -: 1553://   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.
        -: 1554://   tl.set(200);
        -: 1555://   EXPECT_EQ(200, tl.get());
        -: 1556://
        -: 1557:// The template type argument T must have a public copy constructor.
        -: 1558:// In addition, the default ThreadLocal constructor requires T to have
        -: 1559:// a public default constructor.
        -: 1560://
        -: 1561:// The users of a TheadLocal instance have to make sure that all but one
        -: 1562:// threads (including the main one) using that instance have exited before
        -: 1563:// destroying it. Otherwise, the per-thread objects managed for them by the
        -: 1564:// ThreadLocal instance are not guaranteed to be destroyed on all platforms.
        -: 1565://
        -: 1566:// Google Test only uses global ThreadLocal objects.  That means they
        -: 1567:// will die after main() has returned.  Therefore, no per-thread
        -: 1568:// object managed by Google Test will be leaked as long as all threads
        -: 1569:// using Google Test have exited when main() returns.
        -: 1570:template <typename T>
        -: 1571:class ThreadLocal : public ThreadLocalBase {
        -: 1572: public:
        -: 1573:  ThreadLocal() : default_factory_(new DefaultValueHolderFactory()) {}
        -: 1574:  explicit ThreadLocal(const T& value)
        -: 1575:      : default_factory_(new InstanceValueHolderFactory(value)) {}
        -: 1576:
        -: 1577:  ~ThreadLocal() { ThreadLocalRegistry::OnThreadLocalDestroyed(this); }
        -: 1578:
        -: 1579:  T* pointer() { return GetOrCreateValue(); }
        -: 1580:  const T* pointer() const { return GetOrCreateValue(); }
        -: 1581:  const T& get() const { return *pointer(); }
        -: 1582:  void set(const T& value) { *pointer() = value; }
        -: 1583:
        -: 1584: private:
        -: 1585:  // Holds a value of T.  Can be deleted via its base class without the caller
        -: 1586:  // knowing the type of T.
        -: 1587:  class ValueHolder : public ThreadLocalValueHolderBase {
        -: 1588:   public:
        -: 1589:    ValueHolder() : value_() {}
        -: 1590:    explicit ValueHolder(const T& value) : value_(value) {}
        -: 1591:
        -: 1592:    T* pointer() { return &value_; }
        -: 1593:
        -: 1594:   private:
        -: 1595:    T value_;
        -: 1596:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolder);
        -: 1597:  };
        -: 1598:
        -: 1599:
        -: 1600:  T* GetOrCreateValue() const {
        -: 1601:    return static_cast<ValueHolder*>(
        -: 1602:        ThreadLocalRegistry::GetValueOnCurrentThread(this))->pointer();
        -: 1603:  }
        -: 1604:
        -: 1605:  virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const {
        -: 1606:    return default_factory_->MakeNewHolder();
        -: 1607:  }
        -: 1608:
        -: 1609:  class ValueHolderFactory {
        -: 1610:   public:
        -: 1611:    ValueHolderFactory() {}
        -: 1612:    virtual ~ValueHolderFactory() {}
        -: 1613:    virtual ValueHolder* MakeNewHolder() const = 0;
        -: 1614:
        -: 1615:   private:
        -: 1616:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolderFactory);
        -: 1617:  };
        -: 1618:
        -: 1619:  class DefaultValueHolderFactory : public ValueHolderFactory {
        -: 1620:   public:
        -: 1621:    DefaultValueHolderFactory() {}
        -: 1622:    ValueHolder* MakeNewHolder() const override { return new ValueHolder(); }
        -: 1623:
        -: 1624:   private:
        -: 1625:    GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultValueHolderFactory);
        -: 1626:  };
        -: 1627:
        -: 1628:  class InstanceValueHolderFactory : public ValueHolderFactory {
        -: 1629:   public:
        -: 1630:    explicit InstanceValueHolderFactory(const T& value) : value_(value) {}
        -: 1631:    ValueHolder* MakeNewHolder() const override {
        -: 1632:      return new ValueHolder(value_);
        -: 1633:    }
        -: 1634:
        -: 1635:   private:
        -: 1636:    const T value_;  // The value for each thread.
        -: 1637:
        -: 1638:    GTEST_DISALLOW_COPY_AND_ASSIGN_(InstanceValueHolderFactory);
        -: 1639:  };
        -: 1640:
        -: 1641:  std::unique_ptr<ValueHolderFactory> default_factory_;
        -: 1642:
        -: 1643:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocal);
        -: 1644:};
        -: 1645:
        -: 1646:# elif GTEST_HAS_PTHREAD
        -: 1647:
        -: 1648:// MutexBase and Mutex implement mutex on pthreads-based platforms.
        -: 1649:class MutexBase {
        -: 1650: public:
        -: 1651:  // Acquires this mutex.
        -: 1652:  void Lock() {
        -: 1653:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_lock(&mutex_));
        -: 1654:    owner_ = pthread_self();
        -: 1655:    has_owner_ = true;
        -: 1656:  }
        -: 1657:
        -: 1658:  // Releases this mutex.
        -: 1659:  void Unlock() {
        -: 1660:    // Since the lock is being released the owner_ field should no longer be
        -: 1661:    // considered valid. We don't protect writing to has_owner_ here, as it's
        -: 1662:    // the caller's responsibility to ensure that the current thread holds the
        -: 1663:    // mutex when this is called.
        -: 1664:    has_owner_ = false;
        -: 1665:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_unlock(&mutex_));
        -: 1666:  }
        -: 1667:
        -: 1668:  // Does nothing if the current thread holds the mutex. Otherwise, crashes
        -: 1669:  // with high probability.
        -: 1670:  void AssertHeld() const {
        -: 1671:    GTEST_CHECK_(has_owner_ && pthread_equal(owner_, pthread_self()))
        -: 1672:        << "The current thread is not holding the mutex @" << this;
        -: 1673:  }
        -: 1674:
        -: 1675:  // A static mutex may be used before main() is entered.  It may even
        -: 1676:  // be used before the dynamic initialization stage.  Therefore we
        -: 1677:  // must be able to initialize a static mutex object at link time.
        -: 1678:  // This means MutexBase has to be a POD and its member variables
        -: 1679:  // have to be public.
        -: 1680: public:
        -: 1681:  pthread_mutex_t mutex_;  // The underlying pthread mutex.
        -: 1682:  // has_owner_ indicates whether the owner_ field below contains a valid thread
        -: 1683:  // ID and is therefore safe to inspect (e.g., to use in pthread_equal()). All
        -: 1684:  // accesses to the owner_ field should be protected by a check of this field.
        -: 1685:  // An alternative might be to memset() owner_ to all zeros, but there's no
        -: 1686:  // guarantee that a zero'd pthread_t is necessarily invalid or even different
        -: 1687:  // from pthread_self().
        -: 1688:  bool has_owner_;
        -: 1689:  pthread_t owner_;  // The thread holding the mutex.
        -: 1690:};
        -: 1691:
        -: 1692:// Forward-declares a static mutex.
        -: 1693:#  define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1694:     extern ::testing::internal::MutexBase mutex
        -: 1695:
        -: 1696:// Defines and statically (i.e. at link time) initializes a static mutex.
        -: 1697:// The initialization list here does not explicitly initialize each field,
        -: 1698:// instead relying on default initialization for the unspecified fields. In
        -: 1699:// particular, the owner_ field (a pthread_t) is not explicitly initialized.
        -: 1700:// This allows initialization to work whether pthread_t is a scalar or struct.
        -: 1701:// The flag -Wmissing-field-initializers must not be specified for this to work.
        -: 1702:#define GTEST_DEFINE_STATIC_MUTEX_(mutex) \
        -: 1703:  ::testing::internal::MutexBase mutex = {PTHREAD_MUTEX_INITIALIZER, false, 0}
        -: 1704:
        -: 1705:// The Mutex class can only be used for mutexes created at runtime. It
        -: 1706:// shares its API with MutexBase otherwise.
        -: 1707:class Mutex : public MutexBase {
        -: 1708: public:
        -: 1709:  Mutex() {
        -: 1710:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_init(&mutex_, nullptr));
        -: 1711:    has_owner_ = false;
        -: 1712:  }
        -: 1713:  ~Mutex() {
        -: 1714:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_destroy(&mutex_));
        -: 1715:  }
        -: 1716:
        -: 1717: private:
        -: 1718:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Mutex);
        -: 1719:};
        -: 1720:
        -: 1721:// We cannot name this class MutexLock because the ctor declaration would
        -: 1722:// conflict with a macro named MutexLock, which is defined on some
        -: 1723:// platforms. That macro is used as a defensive measure to prevent against
        -: 1724:// inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than
        -: 1725:// "MutexLock l(&mu)".  Hence the typedef trick below.
        -: 1726:class GTestMutexLock {
        -: 1727: public:
        -: 1728:  explicit GTestMutexLock(MutexBase* mutex)
        -: 1729:      : mutex_(mutex) { mutex_->Lock(); }
        -: 1730:
        -: 1731:  ~GTestMutexLock() { mutex_->Unlock(); }
        -: 1732:
        -: 1733: private:
        -: 1734:  MutexBase* const mutex_;
        -: 1735:
        -: 1736:  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestMutexLock);
        -: 1737:};
        -: 1738:
        -: 1739:typedef GTestMutexLock MutexLock;
        -: 1740:
        -: 1741:// Helpers for ThreadLocal.
        -: 1742:
        -: 1743:// pthread_key_create() requires DeleteThreadLocalValue() to have
        -: 1744:// C-linkage.  Therefore it cannot be templatized to access
        -: 1745:// ThreadLocal<T>.  Hence the need for class
        -: 1746:// ThreadLocalValueHolderBase.
        -: 1747:class ThreadLocalValueHolderBase {
        -: 1748: public:
        -: 1749:  virtual ~ThreadLocalValueHolderBase() {}
        -: 1750:};
        -: 1751:
        -: 1752:// Called by pthread to delete thread-local data stored by
        -: 1753:// pthread_setspecific().
        -: 1754:extern "C" inline void DeleteThreadLocalValue(void* value_holder) {
        -: 1755:  delete static_cast<ThreadLocalValueHolderBase*>(value_holder);
        -: 1756:}
        -: 1757:
        -: 1758:// Implements thread-local storage on pthreads-based systems.
        -: 1759:template <typename T>
        -: 1760:class GTEST_API_ ThreadLocal {
        -: 1761: public:
        -: 1762:  ThreadLocal()
        -: 1763:      : key_(CreateKey()), default_factory_(new DefaultValueHolderFactory()) {}
        -: 1764:  explicit ThreadLocal(const T& value)
        -: 1765:      : key_(CreateKey()),
        -: 1766:        default_factory_(new InstanceValueHolderFactory(value)) {}
        -: 1767:
        -: 1768:  ~ThreadLocal() {
        -: 1769:    // Destroys the managed object for the current thread, if any.
        -: 1770:    DeleteThreadLocalValue(pthread_getspecific(key_));
        -: 1771:
        -: 1772:    // Releases resources associated with the key.  This will *not*
        -: 1773:    // delete managed objects for other threads.
        -: 1774:    GTEST_CHECK_POSIX_SUCCESS_(pthread_key_delete(key_));
        -: 1775:  }
        -: 1776:
        -: 1777:  T* pointer() { return GetOrCreateValue(); }
        -: 1778:  const T* pointer() const { return GetOrCreateValue(); }
        -: 1779:  const T& get() const { return *pointer(); }
        -: 1780:  void set(const T& value) { *pointer() = value; }
        -: 1781:
        -: 1782: private:
        -: 1783:  // Holds a value of type T.
        -: 1784:  class ValueHolder : public ThreadLocalValueHolderBase {
        -: 1785:   public:
        -: 1786:    ValueHolder() : value_() {}
        -: 1787:    explicit ValueHolder(const T& value) : value_(value) {}
        -: 1788:
        -: 1789:    T* pointer() { return &value_; }
        -: 1790:
        -: 1791:   private:
        -: 1792:    T value_;
        -: 1793:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolder);
        -: 1794:  };
        -: 1795:
        -: 1796:  static pthread_key_t CreateKey() {
        -: 1797:    pthread_key_t key;
        -: 1798:    // When a thread exits, DeleteThreadLocalValue() will be called on
        -: 1799:    // the object managed for that thread.
        -: 1800:    GTEST_CHECK_POSIX_SUCCESS_(
        -: 1801:        pthread_key_create(&key, &DeleteThreadLocalValue));
        -: 1802:    return key;
        -: 1803:  }
        -: 1804:
        -: 1805:  T* GetOrCreateValue() const {
        -: 1806:    ThreadLocalValueHolderBase* const holder =
        -: 1807:        static_cast<ThreadLocalValueHolderBase*>(pthread_getspecific(key_));
        -: 1808:    if (holder != nullptr) {
        -: 1809:      return CheckedDowncastToActualType<ValueHolder>(holder)->pointer();
        -: 1810:    }
        -: 1811:
        -: 1812:    ValueHolder* const new_holder = default_factory_->MakeNewHolder();
        -: 1813:    ThreadLocalValueHolderBase* const holder_base = new_holder;
        -: 1814:    GTEST_CHECK_POSIX_SUCCESS_(pthread_setspecific(key_, holder_base));
        -: 1815:    return new_holder->pointer();
        -: 1816:  }
        -: 1817:
        -: 1818:  class ValueHolderFactory {
        -: 1819:   public:
        -: 1820:    ValueHolderFactory() {}
        -: 1821:    virtual ~ValueHolderFactory() {}
        -: 1822:    virtual ValueHolder* MakeNewHolder() const = 0;
        -: 1823:
        -: 1824:   private:
        -: 1825:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolderFactory);
        -: 1826:  };
        -: 1827:
        -: 1828:  class DefaultValueHolderFactory : public ValueHolderFactory {
        -: 1829:   public:
        -: 1830:    DefaultValueHolderFactory() {}
        -: 1831:    ValueHolder* MakeNewHolder() const override { return new ValueHolder(); }
        -: 1832:
        -: 1833:   private:
        -: 1834:    GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultValueHolderFactory);
        -: 1835:  };
        -: 1836:
        -: 1837:  class InstanceValueHolderFactory : public ValueHolderFactory {
        -: 1838:   public:
        -: 1839:    explicit InstanceValueHolderFactory(const T& value) : value_(value) {}
        -: 1840:    ValueHolder* MakeNewHolder() const override {
        -: 1841:      return new ValueHolder(value_);
        -: 1842:    }
        -: 1843:
        -: 1844:   private:
        -: 1845:    const T value_;  // The value for each thread.
        -: 1846:
        -: 1847:    GTEST_DISALLOW_COPY_AND_ASSIGN_(InstanceValueHolderFactory);
        -: 1848:  };
        -: 1849:
        -: 1850:  // A key pthreads uses for looking up per-thread values.
        -: 1851:  const pthread_key_t key_;
        -: 1852:  std::unique_ptr<ValueHolderFactory> default_factory_;
        -: 1853:
        -: 1854:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocal);
        -: 1855:};
        -: 1856:
        -: 1857:# endif  // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
        -: 1858:
        -: 1859:#else  // GTEST_IS_THREADSAFE
        -: 1860:
        -: 1861:// A dummy implementation of synchronization primitives (mutex, lock,
        -: 1862:// and thread-local variable).  Necessary for compiling Google Test where
        -: 1863:// mutex is not supported - using Google Test in multiple threads is not
        -: 1864:// supported on such platforms.
        -: 1865:
        -: 1866:class Mutex {
        -: 1867: public:
        -: 1868:  Mutex() {}
        -: 1869:  void Lock() {}
        -: 1870:  void Unlock() {}
        -: 1871:  void AssertHeld() const {}
        -: 1872:};
        -: 1873:
        -: 1874:# define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1875:  extern ::testing::internal::Mutex mutex
        -: 1876:
        -: 1877:# define GTEST_DEFINE_STATIC_MUTEX_(mutex) ::testing::internal::Mutex mutex
        -: 1878:
        -: 1879:// We cannot name this class MutexLock because the ctor declaration would
        -: 1880:// conflict with a macro named MutexLock, which is defined on some
        -: 1881:// platforms. That macro is used as a defensive measure to prevent against
        -: 1882:// inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than
        -: 1883:// "MutexLock l(&mu)".  Hence the typedef trick below.
        -: 1884:class GTestMutexLock {
        -: 1885: public:
        -: 1886:  explicit GTestMutexLock(Mutex*) {}  // NOLINT
        -: 1887:};
        -: 1888:
        -: 1889:typedef GTestMutexLock MutexLock;
        -: 1890:
        -: 1891:template <typename T>
        -: 1892:class GTEST_API_ ThreadLocal {
        -: 1893: public:
        -: 1894:  ThreadLocal() : value_() {}
        -: 1895:  explicit ThreadLocal(const T& value) : value_(value) {}
        -: 1896:  T* pointer() { return &value_; }
        -: 1897:  const T* pointer() const { return &value_; }
        -: 1898:  const T& get() const { return value_; }
        -: 1899:  void set(const T& value) { value_ = value; }
        -: 1900: private:
        -: 1901:  T value_;
        -: 1902:};
        -: 1903:
        -: 1904:#endif  // GTEST_IS_THREADSAFE
        -: 1905:
        -: 1906:// Returns the number of threads running in the process, or 0 to indicate that
        -: 1907:// we cannot detect it.
        -: 1908:GTEST_API_ size_t GetThreadCount();
        -: 1909:
        -: 1910:#if GTEST_OS_WINDOWS
        -: 1911:# define GTEST_PATH_SEP_ "\\"
        -: 1912:# define GTEST_HAS_ALT_PATH_SEP_ 1
        -: 1913:#else
        -: 1914:# define GTEST_PATH_SEP_ "/"
        -: 1915:# define GTEST_HAS_ALT_PATH_SEP_ 0
        -: 1916:#endif  // GTEST_OS_WINDOWS
        -: 1917:
        -: 1918:// Utilities for char.
        -: 1919:
        -: 1920:// isspace(int ch) and friends accept an unsigned char or EOF.  char
        -: 1921:// may be signed, depending on the compiler (or compiler flags).
        -: 1922:// Therefore we need to cast a char to unsigned char before calling
        -: 1923:// isspace(), etc.
        -: 1924:
        -: 1925:inline bool IsAlpha(char ch) {
        -: 1926:  return isalpha(static_cast<unsigned char>(ch)) != 0;
        -: 1927:}
        -: 1928:inline bool IsAlNum(char ch) {
        -: 1929:  return isalnum(static_cast<unsigned char>(ch)) != 0;
        -: 1930:}
        -: 1931:inline bool IsDigit(char ch) {
        -: 1932:  return isdigit(static_cast<unsigned char>(ch)) != 0;
        -: 1933:}
        -: 1934:inline bool IsLower(char ch) {
        -: 1935:  return islower(static_cast<unsigned char>(ch)) != 0;
        -: 1936:}
        -: 1937:inline bool IsSpace(char ch) {
        -: 1938:  return isspace(static_cast<unsigned char>(ch)) != 0;
        -: 1939:}
        -: 1940:inline bool IsUpper(char ch) {
        -: 1941:  return isupper(static_cast<unsigned char>(ch)) != 0;
        -: 1942:}
        -: 1943:inline bool IsXDigit(char ch) {
        -: 1944:  return isxdigit(static_cast<unsigned char>(ch)) != 0;
        -: 1945:}
        -: 1946:inline bool IsXDigit(wchar_t ch) {
        -: 1947:  const unsigned char low_byte = static_cast<unsigned char>(ch);
        -: 1948:  return ch == low_byte && isxdigit(low_byte) != 0;
        -: 1949:}
        -: 1950:
        -: 1951:inline char ToLower(char ch) {
        -: 1952:  return static_cast<char>(tolower(static_cast<unsigned char>(ch)));
        -: 1953:}
        -: 1954:inline char ToUpper(char ch) {
        -: 1955:  return static_cast<char>(toupper(static_cast<unsigned char>(ch)));
        -: 1956:}
        -: 1957:
        -: 1958:inline std::string StripTrailingSpaces(std::string str) {
        -: 1959:  std::string::iterator it = str.end();
        -: 1960:  while (it != str.begin() && IsSpace(*--it))
        -: 1961:    it = str.erase(it);
        -: 1962:  return str;
        -: 1963:}
        -: 1964:
        -: 1965:// The testing::internal::posix namespace holds wrappers for common
        -: 1966:// POSIX functions.  These wrappers hide the differences between
        -: 1967:// Windows/MSVC and POSIX systems.  Since some compilers define these
        -: 1968:// standard functions as macros, the wrapper cannot have the same name
        -: 1969:// as the wrapped function.
        -: 1970:
        -: 1971:namespace posix {
        -: 1972:
        -: 1973:// Functions with a different name on Windows.
        -: 1974:
        -: 1975:#if GTEST_OS_WINDOWS
        -: 1976:
        -: 1977:typedef struct _stat StatStruct;
        -: 1978:
        -: 1979:# ifdef __BORLANDC__
        -: 1980:inline int DoIsATTY(int fd) { return isatty(fd); }
        -: 1981:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 1982:  return stricmp(s1, s2);
        -: 1983:}
        -: 1984:inline char* StrDup(const char* src) { return strdup(src); }
        -: 1985:# else  // !__BORLANDC__
        -: 1986:#  if GTEST_OS_WINDOWS_MOBILE
        -: 1987:inline int DoIsATTY(int /* fd */) { return 0; }
        -: 1988:#  else
        -: 1989:inline int DoIsATTY(int fd) { return _isatty(fd); }
        -: 1990:#  endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1991:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 1992:  return _stricmp(s1, s2);
        -: 1993:}
        -: 1994:inline char* StrDup(const char* src) { return _strdup(src); }
        -: 1995:# endif  // __BORLANDC__
        -: 1996:
        -: 1997:# if GTEST_OS_WINDOWS_MOBILE
        -: 1998:inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }
        -: 1999:// Stat(), RmDir(), and IsDir() are not needed on Windows CE at this
        -: 2000:// time and thus not defined there.
        -: 2001:# else
        -: 2002:inline int FileNo(FILE* file) { return _fileno(file); }
        -: 2003:inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }
        -: 2004:inline int RmDir(const char* dir) { return _rmdir(dir); }
        -: 2005:inline bool IsDir(const StatStruct& st) {
        -: 2006:  return (_S_IFDIR & st.st_mode) != 0;
        -: 2007:}
        -: 2008:# endif  // GTEST_OS_WINDOWS_MOBILE
        -: 2009:
        -: 2010:#elif GTEST_OS_ESP8266
        -: 2011:typedef struct stat StatStruct;
        -: 2012:
        -: 2013:inline int FileNo(FILE* file) { return fileno(file); }
        -: 2014:inline int DoIsATTY(int fd) { return isatty(fd); }
        -: 2015:inline int Stat(const char* path, StatStruct* buf) {
        -: 2016:  // stat function not implemented on ESP8266
        -: 2017:  return 0;
        -: 2018:}
        -: 2019:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 2020:  return strcasecmp(s1, s2);
        -: 2021:}
        -: 2022:inline char* StrDup(const char* src) { return strdup(src); }
        -: 2023:inline int RmDir(const char* dir) { return rmdir(dir); }
        -: 2024:inline bool IsDir(const StatStruct& st) { return S_ISDIR(st.st_mode); }
        -: 2025:
        -: 2026:#else
        -: 2027:
        -: 2028:typedef struct stat StatStruct;
        -: 2029:
        -: 2030:inline int FileNo(FILE* file) { return fileno(file); }
        -: 2031:inline int DoIsATTY(int fd) { return isatty(fd); }
        -: 2032:inline int Stat(const char* path, StatStruct* buf) { return stat(path, buf); }
        -: 2033:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 2034:  return strcasecmp(s1, s2);
        -: 2035:}
        -: 2036:inline char* StrDup(const char* src) { return strdup(src); }
        -: 2037:inline int RmDir(const char* dir) { return rmdir(dir); }
        -: 2038:inline bool IsDir(const StatStruct& st) { return S_ISDIR(st.st_mode); }
        -: 2039:
        -: 2040:#endif  // GTEST_OS_WINDOWS
        -: 2041:
        -: 2042:inline int IsATTY(int fd) {
        -: 2043:  // DoIsATTY might change errno (for example ENOTTY in case you redirect stdout
        -: 2044:  // to a file on Linux), which is unexpected, so save the previous value, and
        -: 2045:  // restore it after the call.
        -: 2046:  int savedErrno = errno;
        -: 2047:  int isAttyValue = DoIsATTY(fd);
        -: 2048:  errno = savedErrno;
        -: 2049:
        -: 2050:  return isAttyValue;
        -: 2051:}
        -: 2052:
        -: 2053:// Functions deprecated by MSVC 8.0.
        -: 2054:
        -: 2055:GTEST_DISABLE_MSC_DEPRECATED_PUSH_()
        -: 2056:
        -: 2057:// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and
        -: 2058:// StrError() aren't needed on Windows CE at this time and thus not
        -: 2059:// defined there.
        -: 2060:
        -: 2061:#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 2062:inline int ChDir(const char* dir) { return chdir(dir); }
        -: 2063:#endif
        -: 2064:inline FILE* FOpen(const char* path, const char* mode) {
        -: 2065:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 2066:  struct wchar_codecvt : public std::codecvt<wchar_t, char, std::mbstate_t> {};
        -: 2067:  std::wstring_convert<wchar_codecvt> converter;
        -: 2068:  std::wstring wide_path = converter.from_bytes(path);
        -: 2069:  std::wstring wide_mode = converter.from_bytes(mode);
        -: 2070:  return _wfopen(wide_path.c_str(), wide_mode.c_str());
        -: 2071:#else  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 2072:  return fopen(path, mode);
        -: 2073:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 2074:}
        -: 2075:#if !GTEST_OS_WINDOWS_MOBILE
        -: 2076:inline FILE *FReopen(const char* path, const char* mode, FILE* stream) {
        -: 2077:  return freopen(path, mode, stream);
        -: 2078:}
        -: 2079:inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }
        -: 2080:#endif
        -: 2081:inline int FClose(FILE* fp) { return fclose(fp); }
        -: 2082:#if !GTEST_OS_WINDOWS_MOBILE
        -: 2083:inline int Read(int fd, void* buf, unsigned int count) {
        -: 2084:  return static_cast<int>(read(fd, buf, count));
        -: 2085:}
        -: 2086:inline int Write(int fd, const void* buf, unsigned int count) {
        -: 2087:  return static_cast<int>(write(fd, buf, count));
        -: 2088:}
        -: 2089:inline int Close(int fd) { return close(fd); }
        -: 2090:inline const char* StrError(int errnum) { return strerror(errnum); }
        -: 2091:#endif
        -: 2092:inline const char* GetEnv(const char* name) {
        -: 2093:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE || \
        -: 2094:    GTEST_OS_WINDOWS_RT || GTEST_OS_ESP8266
        -: 2095:  // We are on an embedded platform, which has no environment variables.
        -: 2096:  static_cast<void>(name);  // To prevent 'unused argument' warning.
        -: 2097:  return nullptr;
        -: 2098:#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)
        -: 2099:  // Environment variables which we programmatically clear will be set to the
        -: 2100:  // empty string rather than unset (NULL).  Handle that case.
        -: 2101:  const char* const env = getenv(name);
        -: 2102:  return (env != nullptr && env[0] != '\0') ? env : nullptr;
        -: 2103:#else
        -: 2104:  return getenv(name);
        -: 2105:#endif
        -: 2106:}
        -: 2107:
        -: 2108:GTEST_DISABLE_MSC_DEPRECATED_POP_()
        -: 2109:
        -: 2110:#if GTEST_OS_WINDOWS_MOBILE
        -: 2111:// Windows CE has no C library. The abort() function is used in
        -: 2112:// several places in Google Test. This implementation provides a reasonable
        -: 2113:// imitation of standard behaviour.
        -: 2114:[[noreturn]] void Abort();
        -: 2115:#else
        -: 2116:[[noreturn]] inline void Abort() { abort(); }
        -: 2117:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 2118:
        -: 2119:}  // namespace posix
        -: 2120:
        -: 2121:// MSVC "deprecates" snprintf and issues warnings wherever it is used.  In
        -: 2122:// order to avoid these warnings, we need to use _snprintf or _snprintf_s on
        -: 2123:// MSVC-based platforms.  We map the GTEST_SNPRINTF_ macro to the appropriate
        -: 2124:// function in order to achieve that.  We use macro definition here because
        -: 2125:// snprintf is a variadic function.
        -: 2126:#if _MSC_VER && !GTEST_OS_WINDOWS_MOBILE
        -: 2127:// MSVC 2005 and above support variadic macros.
        -: 2128:# define GTEST_SNPRINTF_(buffer, size, format, ...) \
        -: 2129:     _snprintf_s(buffer, size, size, format, __VA_ARGS__)
        -: 2130:#elif defined(_MSC_VER)
        -: 2131:// Windows CE does not define _snprintf_s
        -: 2132:# define GTEST_SNPRINTF_ _snprintf
        -: 2133:#else
        -: 2134:# define GTEST_SNPRINTF_ snprintf
        -: 2135:#endif
        -: 2136:
        -: 2137:// The biggest signed integer type the compiler supports.
        -: 2138://
        -: 2139:// long long is guaranteed to be at least 64-bits in C++11.
        -: 2140:using BiggestInt = long long;  // NOLINT
        -: 2141:
        -: 2142:// The maximum number a BiggestInt can represent.
        -: 2143:constexpr BiggestInt kMaxBiggestInt = (std::numeric_limits<BiggestInt>::max)();
        -: 2144:
        -: 2145:// This template class serves as a compile-time function from size to
        -: 2146:// type.  It maps a size in bytes to a primitive type with that
        -: 2147:// size. e.g.
        -: 2148://
        -: 2149://   TypeWithSize<4>::UInt
        -: 2150://
        -: 2151:// is typedef-ed to be unsigned int (unsigned integer made up of 4
        -: 2152:// bytes).
        -: 2153://
        -: 2154:// Such functionality should belong to STL, but I cannot find it
        -: 2155:// there.
        -: 2156://
        -: 2157:// Google Test uses this class in the implementation of floating-point
        -: 2158:// comparison.
        -: 2159://
        -: 2160:// For now it only handles UInt (unsigned int) as that's all Google Test
        -: 2161:// needs.  Other types can be easily added in the future if need
        -: 2162:// arises.
        -: 2163:template <size_t size>
        -: 2164:class TypeWithSize {
        -: 2165: public:
        -: 2166:  // This prevents the user from using TypeWithSize<N> with incorrect
        -: 2167:  // values of N.
        -: 2168:  using UInt = void;
        -: 2169:};
        -: 2170:
        -: 2171:// The specialization for size 4.
        -: 2172:template <>
        -: 2173:class TypeWithSize<4> {
        -: 2174: public:
        -: 2175:  using Int = std::int32_t;
        -: 2176:  using UInt = std::uint32_t;
        -: 2177:};
        -: 2178:
        -: 2179:// The specialization for size 8.
        -: 2180:template <>
        -: 2181:class TypeWithSize<8> {
        -: 2182: public:
        -: 2183:  using Int = std::int64_t;
        -: 2184:  using UInt = std::uint64_t;
        -: 2185:};
        -: 2186:
        -: 2187:// Integer types of known sizes.
        -: 2188:using TimeInMillis = int64_t;  // Represents time in milliseconds.
        -: 2189:
        -: 2190:// Utilities for command line flags and environment variables.
        -: 2191:
        -: 2192:// Macro for referencing flags.
        -: 2193:#if !defined(GTEST_FLAG)
        -: 2194:# define GTEST_FLAG(name) FLAGS_gtest_##name
        -: 2195:#endif  // !defined(GTEST_FLAG)
        -: 2196:
        -: 2197:#if !defined(GTEST_USE_OWN_FLAGFILE_FLAG_)
        -: 2198:# define GTEST_USE_OWN_FLAGFILE_FLAG_ 1
        -: 2199:#endif  // !defined(GTEST_USE_OWN_FLAGFILE_FLAG_)
        -: 2200:
        -: 2201:#if !defined(GTEST_DECLARE_bool_)
        -: 2202:# define GTEST_FLAG_SAVER_ ::testing::internal::GTestFlagSaver
        -: 2203:
        -: 2204:// Macros for declaring flags.
        -: 2205:# define GTEST_DECLARE_bool_(name) GTEST_API_ extern bool GTEST_FLAG(name)
        -: 2206:# define GTEST_DECLARE_int32_(name) \
        -: 2207:    GTEST_API_ extern std::int32_t GTEST_FLAG(name)
        -: 2208:# define GTEST_DECLARE_string_(name) \
        -: 2209:    GTEST_API_ extern ::std::string GTEST_FLAG(name)
        -: 2210:
        -: 2211:// Macros for defining flags.
        -: 2212:# define GTEST_DEFINE_bool_(name, default_val, doc) \
        -: 2213:    GTEST_API_ bool GTEST_FLAG(name) = (default_val)
        -: 2214:# define GTEST_DEFINE_int32_(name, default_val, doc) \
        -: 2215:    GTEST_API_ std::int32_t GTEST_FLAG(name) = (default_val)
        -: 2216:# define GTEST_DEFINE_string_(name, default_val, doc) \
        -: 2217:    GTEST_API_ ::std::string GTEST_FLAG(name) = (default_val)
        -: 2218:
        -: 2219:#endif  // !defined(GTEST_DECLARE_bool_)
        -: 2220:
        -: 2221:// Thread annotations
        -: 2222:#if !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)
        -: 2223:# define GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)
        -: 2224:# define GTEST_LOCK_EXCLUDED_(locks)
        -: 2225:#endif  // !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)
        -: 2226:
        -: 2227:// Parses 'str' for a 32-bit signed integer.  If successful, writes the result
        -: 2228:// to *value and returns true; otherwise leaves *value unchanged and returns
        -: 2229:// false.
        -: 2230:GTEST_API_ bool ParseInt32(const Message& src_text, const char* str,
        -: 2231:                           int32_t* value);
        -: 2232:
        -: 2233:// Parses a bool/int32_t/string from the environment variable
        -: 2234:// corresponding to the given Google Test flag.
        -: 2235:bool BoolFromGTestEnv(const char* flag, bool default_val);
        -: 2236:GTEST_API_ int32_t Int32FromGTestEnv(const char* flag, int32_t default_val);
        -: 2237:std::string OutputFlagAlsoCheckEnvVar();
        -: 2238:const char* StringFromGTestEnv(const char* flag, const char* default_val);
        -: 2239:
        -: 2240:}  // namespace internal
        -: 2241:}  // namespace testing
        -: 2242:
        -: 2243:#if !defined(GTEST_INTERNAL_DEPRECATED)
        -: 2244:
        -: 2245:// Internal Macro to mark an API deprecated, for googletest usage only
        -: 2246:// Usage: class GTEST_INTERNAL_DEPRECATED(message) MyClass or
        -: 2247:// GTEST_INTERNAL_DEPRECATED(message) <return_type> myFunction(); Every usage of
        -: 2248:// a deprecated entity will trigger a warning when compiled with
        -: 2249:// `-Wdeprecated-declarations` option (clang, gcc, any __GNUC__ compiler).
        -: 2250:// For msvc /W3 option will need to be used
        -: 2251:// Note that for 'other' compilers this macro evaluates to nothing to prevent
        -: 2252:// compilations errors.
        -: 2253:#if defined(_MSC_VER)
        -: 2254:#define GTEST_INTERNAL_DEPRECATED(message) __declspec(deprecated(message))
        -: 2255:#elif defined(__GNUC__)
        -: 2256:#define GTEST_INTERNAL_DEPRECATED(message) __attribute__((deprecated(message)))
        -: 2257:#else
        -: 2258:#define GTEST_INTERNAL_DEPRECATED(message)
        -: 2259:#endif
        -: 2260:
        -: 2261:#endif  // !defined(GTEST_INTERNAL_DEPRECATED)
        -: 2262:
        -: 2263:#if GTEST_HAS_ABSL
        -: 2264:// Always use absl::any for UniversalPrinter<> specializations if googletest
        -: 2265:// is built with absl support.
        -: 2266:#define GTEST_INTERNAL_HAS_ANY 1
        -: 2267:#include "absl/types/any.h"
        -: 2268:namespace testing {
        -: 2269:namespace internal {
        -: 2270:using Any = ::absl::any;
        -: 2271:}  // namespace internal
        -: 2272:}  // namespace testing
        -: 2273:#else
        -: 2274:#ifdef __has_include
        -: 2275:#if __has_include(<any>) && __cplusplus >= 201703L
        -: 2276:// Otherwise for C++17 and higher use std::any for UniversalPrinter<>
        -: 2277:// specializations.
        -: 2278:#define GTEST_INTERNAL_HAS_ANY 1
        -: 2279:#include <any>
        -: 2280:namespace testing {
        -: 2281:namespace internal {
        -: 2282:using Any = ::std::any;
        -: 2283:}  // namespace internal
        -: 2284:}  // namespace testing
        -: 2285:// The case where absl is configured NOT to alias std::any is not
        -: 2286:// supported.
        -: 2287:#endif  // __has_include(<any>) && __cplusplus >= 201703L
        -: 2288:#endif  // __has_include
        -: 2289:#endif  // GTEST_HAS_ABSL
        -: 2290:
        -: 2291:#if GTEST_HAS_ABSL
        -: 2292:// Always use absl::optional for UniversalPrinter<> specializations if
        -: 2293:// googletest is built with absl support.
        -: 2294:#define GTEST_INTERNAL_HAS_OPTIONAL 1
        -: 2295:#include "absl/types/optional.h"
        -: 2296:namespace testing {
        -: 2297:namespace internal {
        -: 2298:template <typename T>
        -: 2299:using Optional = ::absl::optional<T>;
        -: 2300:}  // namespace internal
        -: 2301:}  // namespace testing
        -: 2302:#else
        -: 2303:#ifdef __has_include
        -: 2304:#if __has_include(<optional>) && __cplusplus >= 201703L
        -: 2305:// Otherwise for C++17 and higher use std::optional for UniversalPrinter<>
        -: 2306:// specializations.
        -: 2307:#define GTEST_INTERNAL_HAS_OPTIONAL 1
        -: 2308:#include <optional>
        -: 2309:namespace testing {
        -: 2310:namespace internal {
        -: 2311:template <typename T>
        -: 2312:using Optional = ::std::optional<T>;
        -: 2313:}  // namespace internal
        -: 2314:}  // namespace testing
        -: 2315:// The case where absl is configured NOT to alias std::optional is not
        -: 2316:// supported.
        -: 2317:#endif  // __has_include(<optional>) && __cplusplus >= 201703L
        -: 2318:#endif  // __has_include
        -: 2319:#endif  // GTEST_HAS_ABSL
        -: 2320:
        -: 2321:#if GTEST_HAS_ABSL
        -: 2322:// Always use absl::string_view for Matcher<> specializations if googletest
        -: 2323:// is built with absl support.
        -: 2324:# define GTEST_INTERNAL_HAS_STRING_VIEW 1
        -: 2325:#include "absl/strings/string_view.h"
        -: 2326:namespace testing {
        -: 2327:namespace internal {
        -: 2328:using StringView = ::absl::string_view;
        -: 2329:}  // namespace internal
        -: 2330:}  // namespace testing
        -: 2331:#else
        -: 2332:# ifdef __has_include
        -: 2333:#   if __has_include(<string_view>) && __cplusplus >= 201703L
        -: 2334:// Otherwise for C++17 and higher use std::string_view for Matcher<>
        -: 2335:// specializations.
        -: 2336:#   define GTEST_INTERNAL_HAS_STRING_VIEW 1
        -: 2337:#include <string_view>
        -: 2338:namespace testing {
        -: 2339:namespace internal {
        -: 2340:using StringView = ::std::string_view;
        -: 2341:}  // namespace internal
        -: 2342:}  // namespace testing
        -: 2343:// The case where absl is configured NOT to alias std::string_view is not
        -: 2344:// supported.
        -: 2345:#  endif  // __has_include(<string_view>) && __cplusplus >= 201703L
        -: 2346:# endif  // __has_include
        -: 2347:#endif  // GTEST_HAS_ABSL
        -: 2348:
        -: 2349:#if GTEST_HAS_ABSL
        -: 2350:// Always use absl::variant for UniversalPrinter<> specializations if googletest
        -: 2351:// is built with absl support.
        -: 2352:#define GTEST_INTERNAL_HAS_VARIANT 1
        -: 2353:#include "absl/types/variant.h"
        -: 2354:namespace testing {
        -: 2355:namespace internal {
        -: 2356:template <typename... T>
        -: 2357:using Variant = ::absl::variant<T...>;
        -: 2358:}  // namespace internal
        -: 2359:}  // namespace testing
        -: 2360:#else
        -: 2361:#ifdef __has_include
        -: 2362:#if __has_include(<variant>) && __cplusplus >= 201703L
        -: 2363:// Otherwise for C++17 and higher use std::variant for UniversalPrinter<>
        -: 2364:// specializations.
        -: 2365:#define GTEST_INTERNAL_HAS_VARIANT 1
        -: 2366:#include <variant>
        -: 2367:namespace testing {
        -: 2368:namespace internal {
        -: 2369:template <typename... T>
        -: 2370:using Variant = ::std::variant<T...>;
        -: 2371:}  // namespace internal
        -: 2372:}  // namespace testing
        -: 2373:// The case where absl is configured NOT to alias std::variant is not supported.
        -: 2374:#endif  // __has_include(<variant>) && __cplusplus >= 201703L
        -: 2375:#endif  // __has_include
        -: 2376:#endif  // GTEST_HAS_ABSL
        -: 2377:
        -: 2378:#endif  // GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
